===========================SFMApping contract
<template>
        <!--Use template if:true to display/hide popup based on isModalOpen value--> 
        <template if:true={openModel}>
            <!-- Modal/Popup Box LWC starts here -->
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box LWC header here -->
                    <header class="slds-modal__header">
                        <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                            <lightning-icon name="utility:close"
                                alternative-text="close"
                                variant="inverse"
                                size="large" ></lightning-icon>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">New Mapping Contract</h2>
                     </header> 
                     <h3 class="slds-section__title">
                        
                        <div class="slds-section__title-action">
                          <span class="slds-truncate" title="Section Title">Mapping Contract Information</span>
                        </div>
                      </h3> 
                     
    <lightning-record-edit-form
                 record-id={recordId} 
                    object-api-name={objectApiName}
                    layout-type="Full"
                    onsubmit={handleSubmit}
                    onsuccess={handleSuccess}>
                    <lightning-messages>
        </lightning-messages>
 <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">

                 <div class="slds-grid slds-wrap">
    <div class="slds-size_1-of-2 slds-p-horizontal_x-small">
        <lightning-input label="Mapping Contract Name" type="text" value={name} required="true" onchange={contactChangeVal}></lightning-input>
    </div>
    <div class="slds-size_1-of-2 slds-p-horizontal_x-small slds-m-top_large">
        <lightning-input label="Active" type="checkbox" checked="true" onchange={contactChangeVal}></lightning-input>
    </div>

<div class="slds-size_1-of-2 slds-p-horizontal_x-small">
                    <lightning-combobox type="picklist" 
                    label="Source Datastore" 
                    onchange={contactChangeVal}
                 value={sourcedatastore}
                 required="true"
                 options={options}
                  >
                 </lightning-combobox>
                 </div>
                 <div class="slds-size_1-of-2 slds-p-horizontal_x-small">
                 <lightning-combobox type="picklist" 
                    label="Target Datastore" 
                    onchange={contactChangeVal}
                 value={targetdatastore}
                 required="true"
                 options={options}
                 >
                 </lightning-combobox>
                 </div>
                 <!--template for:each={allObjectList} for:item="ObjectList">
                    <li key={ObjectList.value}>{ObjectList.value}</li>
                  </template-->
                  <div class="slds-size_1-of-2 slds-p-horizontal_x-small">
                 <lightning-textarea type="text"
                 label="Description"
                 value={description}
                 onchange={contactChangeVal}
                 
                 >
                </lightning-textarea>
                </div>
                <div class="slds-size_1-of-2 slds-p-horizontal_x-small">
                <lightning-input type="text" value={endpointurl} required="true" onchange={contactChangeVal} helptext="Enter Url" label= "End Point Url" name="Url"></lightning-input>       
                <lightning-helptext content="Enter Url"></lightning-helptext> 
                </div>

            </div>
        </div>
        
                <!-- Modal/Popup Box LWC footer starts here -->
                <footer class="slds-modal__footer">
                    <lightning-button class="slds-m-left_x-small" variant="Neutral" onclick={closeModal} label="Cancel">Cancel</lightning-button>
                    <lightning-button class="slds-m-left_x-small" variant="brand" onclick={insertContactAction} name="save" label="Save"></lightning-button>
                </footer>
                
            </lightning-record-edit-form>
       

            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </template>


</template>
==================================Java Script SFMApping contract
import {LightningElement, track, wire, api } from 'lwc';
import mpName from '@salesforce/schema/Mapping_Contract__c.Name';
import mpSourceDatastore from '@salesforce/schema/Mapping_Contract__c.Source_Datastore__c';
import mpTargetDatastore from '@salesforce/schema/Mapping_Contract__c.Target_Datastore__c';
import mpDescription from '@salesforce/schema/Mapping_Contract__c.Description__c';
import mpEndPointUrl from '@salesforce/schema/Mapping_Contract__c.End_Point_Url__c';
import mpMainMapping from '@salesforce/schema/Mapping_Contract__c';
import {NavigationMixin} from 'lightning/navigation';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import { createRecord } from 'lightning/uiRecordApi';

export default class SFNewMappingContractLwc extends NavigationMixin(LightningElement) {
    @api objectApiName;
    @api recordId;
    @track mpName;
    @track mpSourceDatastore;
    @track mpDescription;
    @track mpTargetDatastore;
    @track mpEndPointUrl
    @track RecoreId;
    @track errorMsg;
    @track isModalOpen = true;

    value='';
    description='';
    sourcedatastore='';
    targetdatastore='';
    name='';
    endpointurl='';

    handleSubmit(event) {
        
        console.log('onsubmit event recordEditForm'+ event.detail.fields);
    }
    
    get options() {
        return [
            { label: 'None', value: '' },
            { label: 'Salesforce', value: 'Salesforce' },
            { label: 'SAP', value: 'SAP' },
        ];
    }

    openModel () {
        //component.set("v.allList",'');
        this.isModalOpen = true;
        
    }
    closeModal() {
           
                this[NavigationMixin.Navigate]({
                    type: 'standard__objectPage',
                    attributes: {
                        objectApiName: 'Mapping_Contract__c',
                        actionName: 'home'
                    },
                });
            }  
         
    
    handleSuccess(event){
        if(this.recordId !== null){
            this.dispatchEvent(new ShowToastEvent({
                    title: "SUCCESS!",
                    message: "New record has been created.",
                   variant: "success",
                }),  
           );
           
               
            }
            
        }

        contactChangeVal(event) {
            console.log(event.target.label);
            console.log(event.target.value);        
          
            if(event.target.label=='Mapping Contract Name'){
                this.name = event.target.value;
            } 
            if(event.target.label=='Active'){
                this.value = event.target.checked;
            }     
            else{
                this.value = event.target.unchecked; 
            }           
            if(event.target.label=='Source Datastore'){
                this.sourcedatastore = event.target.value;
            }
            if(event.target.label=='Target Datastore'){
                this.targetdatastore = event.target.value;
            }
            if(event.target.label=='Description'){
                this.description = event.target.value;
            }
            if(event.target.label=='End Point Url'){
                this.endpointurl = event.target.value;
            }
            
            
        }
insertContactAction(){
            const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
            .reduce((validSoFar, inputField) => {
                inputField.reportValidity();
                return validSoFar && inputField.checkValidity();
            }, true);
            const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
            .reduce((validSoFar, input_Field_Reference) => {
                input_Field_Reference.reportValidity();
                return validSoFar && input_Field_Reference.checkValidity();
            }, true);            
            if (isInputsCorrect && All_Compobox_Valid) {

            this.isModalOpen = false;
            console.log(this.selectedAccountId);
            const fields = {};
            fields[mpName.fieldApiName] = this.name;
            fields[mpSourceDatastore.fieldApiName] = this.sourcedatastore;
            fields[mpTargetDatastore.fieldApiName] = this.targetdatastore;
            fields[mpDescription.fieldApiName] = this.description;
            fields[mpEndPointUrl.fieldApiName] = this.endpointurl;
            //fields[objActive.fieldApiName] = this.value;
           
            const recordInput = { apiName: mpMainMapping.objectApiName, fields };
            createRecord(recordInput)
                .then(contactobj=> {
                    this.contactId = contactobj.id;
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Success',
                            message: 'Record has been created',
                            variant: 'success',
                        }),
                    );
                    this[NavigationMixin.Navigate]({
                        type: 'standard__recordPage',
                        attributes: {
                            recordId: contactobj.id,
                            objectApiName: 'Mapping_Contract__c',
                            actionName: 'view'
                        },
                    });
                })
                .catch(error => {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Error creating record',
                            message: error.body.message,
                            variant: 'error',
                        }),
                    );
                });
        }
    }
}
===================================SFMapping contract Edit
<template>
    <!--Use template if:true to display/hide popup based on isModalOpen value--> 
    <template if:true={openModel}>
        <lightning-record-edit-form
             record-id={recordId} 
                object-api-name="Mapping_Contract__c"
                
                onsubmit={handleSubmit}
                onsuccess={handleSuccess}>
                <lightning-messages>
    </lightning-messages>
        <!-- Modal/Popup Box LWC starts here -->
        <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <!-- Modal/Popup Box LWC header here -->
                <header class="slds-modal__header">
                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                        <lightning-icon name="utility:close"
                            alternative-text="close"
                            variant="inverse"
                            size="large" ></lightning-icon>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Edit Mapping Contract</h2>
                 </header>    
                 <h3 class="slds-section__title">
                        
                    <div class="slds-section__title-action">
                      <span class="slds-truncate" title="Section Title">Mapping Contract Information</span>
                    </div>
                  </h3> 

<div class="slds-modal__content slds-p-around_medium slds-grid slds-wrap" id="modal-content-id-1">

             <lightning-input  
             label="Mapping Contract Name"
             type="text"
             field-name="Name" 
             value={name}
             required="true"
             onchange={contactChangeVal} class="slds-size_1-of-2 slds-p-horizontal_x-small" >
             </lightning-input>
             <div class="slds-size_1-of-2 slds-p-horizontal_x-small slds-m-top_large">
             <lightning-input  
             label="Active"
             type="checkbox"
             field-name="Active__c" 
             checked="true"
             value={name}
             onchange={contactChangeVal} >
             </lightning-input>
             </div>
                <lightning-combobox type="picklist" 
                label="Source Datastore" 
                onchange={contactChangeVal}
             value={sourcedatastore}
             required="true"
             field-name="Source_Datastore__c" 
             options={options}
             class="slds-size_1-of-2 slds-p-horizontal_x-small" >
             </lightning-combobox>
             <lightning-combobox type="picklist" 
                label="Target Datastore" 
                onchange={contactChangeVal}
                field-name="Target_Datastore__c" 
             value={targetdatastore}
             required="true"
             options={options}
             class="slds-size_1-of-2 slds-p-horizontal_x-small" >
             </lightning-combobox>
             <!--template for:each={allObjectList} for:item="ObjectList">
                <li key={ObjectList.value}>{ObjectList.value}</li>
              </template-->
             <lightning-textarea type="text"
             label="Description"
             value={description}
             field-name="Description__c"
             onchange={contactChangeVal}
             
             class="slds-size_1-of-2 slds-p-horizontal_x-small">
            </lightning-textarea>
            <lightning-input type="text" value={endpointurl} field-name="End_Point_Url__c" required="true" onchange={contactChangeVal} helptext="Enter Url" label= "End Point Url" name="Url"  class="slds-size_1-of-4 slds-p-horizontal_x-small"></lightning-input>       
            <lightning-helptext content="Enter Url"></lightning-helptext> 
            

        </div>
    
            <!-- Modal/Popup Box LWC footer starts here -->
            <footer class="slds-modal__footer">
                <lightning-button class="slds-m-left_x-small" variant="Neutral" onclick={closeModal} label="Cancel">Cancel</lightning-button>
                <lightning-button class="slds-m-left_x-small" variant="brand" onclick={insertContactAction} name="save" label="Save"></lightning-button>
            </footer>
            
        
   

        </div>
    </section>
    <div class="slds-backdrop slds-backdrop_open"></div>
    </lightning-record-edit-form>
</template>


</template>
==================================Java Script
import {LightningElement, track, wire, api } from 'lwc';
import mpName from '@salesforce/schema/Mapping_Contract__c.Name';
import mpSourceDatastore from '@salesforce/schema/Mapping_Contract__c.Source_Datastore__c';
import mpTargetDatastore from '@salesforce/schema/Mapping_Contract__c.Target_Datastore__c';
import mpDescription from '@salesforce/schema/Mapping_Contract__c.Description__c';
import mpEndPointUrl from '@salesforce/schema/Mapping_Contract__c.End_Point_Url__c';
import mpMainMapping from '@salesforce/schema/Mapping_Contract__c';
import mpActive from '@salesforce/schema/Mapping_Contract__c.Active__c';
import {NavigationMixin} from 'lightning/navigation';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import { createRecord } from 'lightning/uiRecordApi';
import { getRecord, getFieldValue } from 'lightning/uiRecordApi';
import { updateRecord } from 'lightning/uiRecordApi';
import Id from '@salesforce/schema/AcceptedEventRelation.Id';

export default class SFNewMappingContractLwc extends NavigationMixin(LightningElement) {

    @api objectApiName;
    @api recordId;

    

    @wire(getRecord, { recordId: '$recordId', 
                    fields:[mpName,mpSourceDatastore,mpTargetDatastore,mpDescription,mpEndPointUrl,mpActive ] })
    

    wiredRecordData({ error, data }) {

  if (data) {

    this.name = getFieldValue(data, mpName);

    this.sourcedatastore = getFieldValue(data, mpSourceDatastore);

    this.targetdatastore = getFieldValue(data, mpTargetDatastore);

    this.description = getFieldValue(data, mpDescription);

    this.active = getFieldValue(data, mpActive);

    this.endpointurl = getFieldValue(data, mpEndPointUrl);

    console.log('this.endpointurl ',this.sourcedatastore );
    console.log('this.endpointurl ',this.targetdatastore );
    console.log('this.endpointurl ',this.endpointurl );

  } else if (error) {
    console.log('recordId',recordId);

    

  }
}

   
    @track mpName;
    @track mpSourceDatastore;
    @track mpDescription;
    @track mpTargetDatastore;
    @track mpEndPointUrl
    @track RecoreId;
    @track errorMsg;
    @track isModalOpen = true;

    value='';
    description='';
    sourcedatastore='';
    targetdatastore='';
    name='';
    endpointurl='';

    handleSubmit(event) {
        
        console.log('onsubmit event recordEditForm'+ event.detail.fields);
    }
    
    get options() {
        return [
            { label: 'None', value: '' },
            { label: 'Salesforce', value: 'Salesforce' },
            { label: 'SAP', value: 'SAP' },
        ];
    }

    openModel () {
        //component.set("v.allList",'');
        this.isModalOpen = true;
        
    }
    closeModal() {
           
                this[NavigationMixin.Navigate]({
                    type: 'standard__objectPage',
                    attributes: {
                        objectApiName: 'Mapping_Contract__c',
                        actionName: 'home'
                    },
                });
            }  
         
            handleSubmit(event) {
        
                console.log('onsubmit event recordEditForm'+ event.detail.fields);
            }
    
    handleSuccess(event){
        if(this.recordId !== null){
            this.dispatchEvent(new ShowToastEvent({
                    title: "SUCCESS!",
                    message: "New record has been created.",
                   variant: "success",
                }),  
           );
           
               
            }
            
        }

        contactChangeVal(event) {
            console.log(event.target.label);
            console.log(event.target.value);        
          
            if(event.target.label=='Mapping Contract Name'){
                this.name = event.target.value;
            } 
            if(event.target.label=='Active'){
                this.value = event.target.checked;
            }     
            else{
                this.value = event.target.unchecked; 
            }           
            if(event.target.label=='Source Datastore'){
                this.sourcedatastore = event.target.value;
            }
            if(event.target.label=='Target Datastore'){
                this.targetdatastore = event.target.value;
            }
            if(event.target.label=='Description'){
                this.description = event.target.value;
            }
            if(event.target.label=='End Point Url'){
                this.endpointurl = event.target.value;
            }
            
            
        }
insertContactAction(){
            const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
            .reduce((validSoFar, inputField) => {
                inputField.reportValidity();
                return validSoFar && inputField.checkValidity();
            }, true);
            const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
            .reduce((validSoFar, input_Field_Reference) => {
                input_Field_Reference.reportValidity();
                return validSoFar && input_Field_Reference.checkValidity();
            }, true);            
            if (isInputsCorrect && All_Compobox_Valid) {

            this.isModalOpen = false;
            console.log(this.recordId);
            const fields = {};
            fields[Id.fieldApiName]= this.recordId;
            fields[mpName.fieldApiName] = this.name;
            fields[mpSourceDatastore.fieldApiName] = this.sourcedatastore;
            fields[mpTargetDatastore.fieldApiName] = this.targetdatastore;
            fields[mpDescription.fieldApiName] = this.description;
            fields[mpEndPointUrl.fieldApiName] = this.endpointurl;
            //fields[objActive.fieldApiName] = this.value;
           
            const recordInput = {fields};
            console.log('fields',JSON.stringify(recordInput));
            console.log('rec',this.recordId);
            updateRecord(recordInput)
                .then(result=> {
                    console.log('result',result);
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Success',
                            message: 'Record has been created',
                            variant: 'success',
                        }),
                    );
                    this[NavigationMixin.Navigate]({
                        type: 'standard__recordPage',
                        attributes: {
                            recordId: result.id,
                            objectApiName: 'Mapping_Contract__c',
                            actionName: 'view'
                        },
                    });
                })
                .catch(error => {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Error creating record',
                            message: error.body.message,
                            variant: 'error',
                        }),
                    );
                });
        }
    }
}
===================================Details
<template>
    <lightning-card>     
        <div class="">
        <lightning-record-edit-form record-id={recordId} onsuccess={handleSuccess} object-api-name="Mapping_Contract__c">                    
            <div class="slds-modal__content slds-p-around_small slds-grid slds-wrap">  
      <div class="slds-modal__content slds-p-around_small slds-size_1-of-2" >
        <abbr title="required" class="slds-required">*</abbr>Mapping Conntract Name
                          <div class="slds-grid slds-wrap">
    <lightning-output-field field-name ="Name" variant="label-hidden"
    ></lightning-output-field>   
    </div>
    <p class=" slds-border_bottom"></p> 
    <br/>
    <abbr title="required" class="slds-required">*</abbr>Source DataStore
    <div class="slds-grid slds-wrap">
     <lightning-output-field field-name ="Source_Datastore__c" variant="label-hidden" 
                        >
                       </lightning-output-field>
                       </div>
                       <p class=" slds-border_bottom"></p> 
    <br/>
    <label>Description</label>
                       <template if:true={showEditField}>                           
                        <lightning-input-field field-name= "Description__c"
                        variant="label-hidden">
                        </lightning-input-field>
                        </template>
                       <lightning-layout horizontal-align="spread" >
                       <template if:false={showEditField}>
                        <lightning-layout-Item>
                          <lightning-output-field field-name= "Description__c"
                          variant="label-hidden">
                         </lightning-output-field>
                         </lightning-layout-Item>
                         <lightning-layout-Item>
                          <div class='div-block'>                           
                              <lightning-button-icon variant="bare"  icon-name="utility:edit" onclick={handleEdit}>
                              </lightning-button-icon> 
                       </div>
                       </lightning-layout-Item>      
                         </template>
                       </lightning-layout>                     
                       <p class=" slds-border_bottom"></p>             
                </div>
                <div class="slds-modal__content slds-p-around_small slds-size_1-of-2" >
    <lightning-output-field field-name= "Active__c" label ="Active" variant="field-name-hidden">
    </lightning-output-field>
    <p class="slds-border_bottom"></p> 
    <br/>
    <abbr title="required" class="slds-required">*</abbr>Target Datastore
    <div class="slds-grid slds-wrap">
                       <lightning-output-field field-name ="Target_Datastore__c" variant="label-hidden">
                      </lightning-output-field>
                      </div>
                      <p class=" slds-border_bottom"></p> 
                      <br/>
                      <abbr title="required" class="slds-required">*</abbr>End Point Url
    <div class="slds-grid slds-wrap">                      
                      <template if:true={showEditField}>
                        <lightning-input-field field-name= "End_Point_Url__c"
                        variant="label-hidden">
                       </lightning-input-field>
                    </template>
                    </div>      
                    <lightning-layout horizontal-align="spread" >
                      <template if:false={showEditField}>
                        <lightning-layout-Item>
                          <lightning-output-field field-name= "End_Point_Url__c"
                          variant="label-hidden">
                         </lightning-output-field>
                         </lightning-layout-Item>
                         <lightning-layout-Item>
                          <div class='div-block'>

                        <lightning-button-icon variant="bare"  icon-name="utility:edit" onclick={handleEdit}>
                        </lightning-button-icon>
                    </div>
                    </lightning-layout-Item>
                        </template>
                      </lightning-layout>
                     <p class=" slds-border_bottom"></p> 
                  </div>                 
                 </div>
                 <p class="slds-modal__content slds-p-around_small slds-grid slds-wrap">   </p>     
                 <table class="slds-table slds-theme_shade">
                     <tr class="" >
                         <th class="" scope="col" >
                             <p class=""> <lightning-button-icon icon-name={systemInfoIconName}   class={systemInfoIconClass}   variant="bare"
                                 alternative-text={systemInfoIconLabel} onclick={toggleSection}  ></lightning-button-icon><b>System Information</b></p>  
                         </th>         
                     </tr>
                 </table>
                 <template if:true={showSystemInfo}>
                 <div class="slds-grid slds-gutters">
                     <div class="slds-col">
                         <span>
                 <div class="slds-modal__content slds-p-around_small slds-size_1-of-2">
                     <div>Created By</div>
                     <div class="slds-grid slds-wrap">
                         <lightning-output-field field-name="CreatedById" variant="label-hidden" aura-id="createdById"></lightning-output-field>                        
                             <lightning-output-field field-name="CreatedDate" variant="label-hidden" aura-id="createdDate"></lightning-output-field>
                         </div>                  
                     <br/>
                 </div>
             </span>
             <p class=" slds-border_bottom"></p> 
             </div>
             <div class="slds-col">
                 <span>
                 <div class="slds-modal__content slds-p-around_small slds-size_1-of-2">
                     <div>Last Modified By</div>
                     <div class="slds-grid slds-wrap">
                         <lightning-output-field field-name="LastModifiedById" variant="label-hidden" aura-id="lastModifiedById"></lightning-output-field>
                         <div class="slds-p-left_x-small">
                             <lightning-output-field field-name="LastModifiedDate" variant="label-hidden" aura-id="lastModifiedDate"></lightning-output-field>
                         </div> 
                     </div>
                     <br/>
                 </div>
             </span>
             <p class=" slds-border_bottom">  </p> 
             </div>
         </div>
         </template>
                   <template if:true={getSalesforce}>
                    <footer class="slds-modal__footer">
                       <div class="slds-align_absolute-center">
                        <lightning-button class="slds-m-left_x-small slds-float_none" variant="Neutral" onclick={handleCancel} label="Cancel">Cancel</lightning-button>
                        <lightning-button type="submit" variant="brand" onclick={handleSave} name="submit" label="Save">
                        </lightning-button>                       </div>
                    </footer>
                
                </template>
            
            </lightning-record-edit-form>
        </div>
    </lightning-card>
</template>

================================================Java Script Detail Page
import { LightningElement, api, track,  } from 'lwc';

export default class SFconnectorobjectdetail extends LightningElement {
     
    @track getSalesforce = false;
    @track showEditField = false;
    @api recordId;
    @api objectApiName;
   

   @track showCreatedBy=false;
   @track isEditMode = false;
   @track hidebutton=false;
   
   @track activeTabValue = 'details';
   systemInfoIconName = 'utility:chevrondown';

   connectedCallback(){

    this.showSystemInfo=true;
}


   handleEdit() {
    this.getSalesforce=true
    this.showEditField = !this.showEditField;
}
handleSuccess(event) {
    this.showEditField = false;
}

handleCancel(){

    this.getSalesforce=false
    this.showEditField = false;
}
handleSave(){
    this.getSalesforce=false
    
}

toggleSection() {
    this.showSystemInfo = !this.showSystemInfo;
    if (this.showSystemInfo) {
        this.systemInfoIconName = 'utility:chevrondown';
        this.systemInfoIconLabel = 'Show System Information';
    } else {
        this.systemInfoIconName = 'utility:chevronright';
        this.systemInfoIconLabel = 'Hide System Information';
    }
}
}
============================================
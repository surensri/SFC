<template>
    
    <!--Use template if:true to display/hide popup based on isModalOpen value--> 
    <template if:true={isModalOpen}>
        <!-- Modal/Popup Box LWC starts here -->
        <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <!-- Modal/Popup Box LWC header here -->
                <header class="slds-modal__header">
                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                        <lightning-icon name="utility:close"
                            alternative-text="close"
                            variant="inverse"
                            size="large" ></lightning-icon>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">New Object</h2>
                 </header>
                 
                 <lightning-record-edit-form
                 record-id={recordId} 
                    object-api-name={objectApiName}
                    layout-type="Full"
                    onsubmit={handleSubmit}
                    class="validate"
                    onsuccess={handleSuccess}>
                    <lightning-messages>
        </lightning-messages>

                 <div class="slds-modal__content slds-p-around_medium slds-grid slds-wrap" id="modal-content-id-1">
                 <lightning-combobox  
                 label="Datastore"
                 type="picklist"
                 value={datastore}
                 placeholder="--None--"
                 options={options}
                 required="true" 
                 onchange={handleChange} class="dvalidate slds-size_1-of-2 slds-p-horizontal_x-small" >
                 </lightning-combobox>
                
                 
                 <template if:true={getSalesforce}>
                    <lightning-combobox type="picklist" 
                    label="Object Name" 
                 onchange={contactChangeVal}
                 value={name}
                 required="true" 
                 options={objectList}
                 class="objvalidate slds-size_1-of-2 slds-p-horizontal_x-small" >
                 </lightning-combobox>
                 <!--template for:each={allObjectList} for:item="ObjectList">
                    <li key={ObjectList.value}>{ObjectList.value}</li>
                  </template-->
                
                </template>
                 
                
                <template if:false={getSalesforce}>
                 <lightning-input type="text"
                 label="Object Name"
                 onchange={contactChangeVal}
                 value={name}
                 required="true" 
              disabled={nonevalue}
                 class="objvalidate slds-size_1-of-2 slds-p-horizontal_x-small">
                </lightning-input>
                </template>
                
                <lightning-textarea type="text" onchange={contactChangeVal} 
                value={description} label= "Description" 
                class="slds-size_1-of-2 slds-p-horizontal_x-small">
                </lightning-textarea>    
            
                  
                <lightning-input type="checkbox" label= "Active"  
                checked= "true" 
                class="slds-size_1-of-2 slds-p-horizontal_x-small">
                </lightning-input>
                
                
            </div>    
        
                <!-- Modal/Popup Box LWC footer starts here -->
                <footer class="slds-modal__footer">
                    <lightning-button class="slds-m-left_x-small" variant="Neutral" onclick={closeModal} label="Cancel">Cancel</lightning-button>
                    <lightning-button class="slds-m-left_x-small" variant="brand" onclick={insertContactAction} name="save" label="Save"></lightning-button>
                </footer>
            </lightning-record-edit-form>
       

            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </template>


</template>
==============================================Java Script
import {LightningElement, track, wire, api } from 'lwc';
import { createRecord } from 'lightning/uiRecordApi';
import getAllObjects from '@salesforce/apex/SFgetobject.getAllObjects';

import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import {NavigationMixin} from 'lightning/navigation';
import objDatastore from '@salesforce/schema/Objects__c.Datastore__c';
import objjName from '@salesforce/schema/Objects__c.Name';
import objDescription from '@salesforce/schema/Objects__c.Description__c';
//import objActive from '@salesforce/schema/Objects__c.Active__c';
import objMainObject from '@salesforce/schema/Objects__c';
import Name from '@salesforce/schema/Account.Name';
import Description from '@salesforce/schema/Account.Description';
import Datastore__c from '@salesforce/schema/Objects__ChangeEvent.Datastore__c';
//import ACCOUNT_ID_FIELD from '@salesforce/schema/Objects__c.AccountId';

//import saveObjAction from '@salesforce/apex/SFgetobject.saveObjAction';


export default class sFconnectorObject extends NavigationMixin(LightningElement) {

    
    @api objectApiName;
    @api recordId;
    /*objectApiName = objMainObject;
    dataStoreField = DATASTORE_FIELD;
    objectNameField = OBJECTNAME_FIELD;
    descriptionField = DESCRIPTION_FIELD;
    activeField = ACTIVE_FIELD;*/

    //AccountId  = ACCOUNT_ID_FIELD

    @track ObName;
    @track ObjDatastore;
    @track ObjDescription;
    @track ObjActive;
    @track RecoreId;
    @track errorMsg;
    @track isModalOpen = true;

    @track nonevalue=true;
    
    @track getSalesforce = false;
    @track objectList = [];
    objectName = '';
    connectedCallback() { 
        getAllObjects()
        .then((result) => {
           
            if (result) {
                
                this.objectList=[];
            
                for (let key in result ) {
                    this.objectList.push({"label": result[key], "value": result[key]});   
                }
                
            } else {
                console.log('Error in getting objects ')
            }
        }).catch((error) => {
            console.log('Catch Error in getting objects   ')
        });
    }
    handleSubmit(event) {
        
        console.log('onsubmit event recordEditForm'+ event.detail.fields);
    }
    

    
    closeModal() {  
        // to close modal set isModalOpen tarck value as false
        this.isModalOpen = false;
        
        this[NavigationMixin.Navigate]({
            type: 'standard__objectPage',
            attributes: {
                objectApiName: 'Objects__c',
                actionName: 'home'
            },
        });
    
    }  


    get options() {
        return [
            
            { label: 'Salesforce', value: 'Salesforce' },
            { label: 'SAP', value: 'SAP' },
        ];
    }
    
    handleChange(event){
        if(event.target.label=='Datastore'){
            this.datastore = event.target.value;
        }
        this.value = event.detail.value;
        
        if(event.target.name == 'Datastore'){
            this.Objects__c=this.Datastore__c;  
          }
        
        if (this.value=='Salesforce'){
        this.getSalesforce = true;
    }
    else if (this.value=='SAP'){
        this.getSalesforce = false;
        this.nonevalue=false;
      }
     else
     this.nonevalue=true;
    }

      setChange(event){
        //this.Name = event.detail.value;
        //this.Objects__c.Name=this.Name;
        if(event.target.name == 'Name'){
            this.Objects__c.Name=this.Name;  
            console.log('kkk',this);
            }
      }
      scoreHandleChange(event){
        if(event.target.name == 'Description'){
            this.Objects__c.Description__c=this.Description__c; 

          }
          if(event.target.name == 'Active'){
            this.Objects__c.Active__c=this.Active__c; 
          }

      }
      handleSuccess(event){
        if(this.recordId !== null){
            this.dispatchEvent(new ShowToastEvent({
                    title: "SUCCESS!",
                    message: "New record has been created.",
                   variant: "success",
                }),  
           );
           
               
            }
            
        }

        datastore = '';
    name ='';
    description='';
    value='';

    contactChangeVal(event) {
        console.log(event.target.label);
        console.log(event.target.value);        
      
        if(event.target.label=='Object Name'){
            this.name = event.target.value;
        }            
        if(event.target.label=='Description'){
            this.description = event.target.value;
        }
        if(event.target.label=='Active'){
            this.value = event.target.checked;
        }     
        else{
            this.value = event.target.unchecked; 
        }
        
    }
    insertContactAction()
    {


const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
            .reduce((validSoFar, inputField) => {
                inputField.reportValidity();
                return validSoFar && inputField.checkValidity();
            }, true);
const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
            .reduce((validSoFar, input_Field_Reference) => {
                input_Field_Reference.reportValidity();
                return validSoFar && input_Field_Reference.checkValidity();
            }, true);            
 if (isInputsCorrect && All_Compobox_Valid) {   
        console.log('saverecord',this.selectedAccountId);
        const fields = {};
        fields[objDatastore.fieldApiName] = this.datastore;
        fields[objjName.fieldApiName] = this.name;
        fields[objDescription.fieldApiName] = this.description;
        //fields[objActive.fieldApiName] = this.value;
       
        const recordInput = { apiName: objMainObject.objectApiName, fields };
        createRecord(recordInput)
            .then(contactobj=> {
                this.contactId = contactobj.id;
                console.log('contactId',this.contactId);
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Record has been created',
                        variant: 'success',
                    }),
                );
                this[NavigationMixin.Navigate]({
                    type: 'standard__recordPage',
                    attributes: {
                        recordId: contactobj.id,
                        objectApiName: 'Objects__c',
                        actionName: 'view'
                    },
                });

            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });

        
        }
    
    }

    handleValidation() {
       
        
        let dstoreCmp = this.template.querySelector(".dvalidate");
        let objCmp = this.template.querySelector(".objvalidate");
        if (!dstoreCmp.value) {
            dstoreCmp.setCustomValidity("Value is required");
        } else {
            dstoreCmp.setCustomValidity(""); // clear previous value
        }
        dstoreCmp.reportValidity();
 
        if (!objCmp.value) {
            objCmp.setCustomValidity("Value is required");
        } else {
            objCmp.setCustomValidity(""); // clear previous value
        }
        objCmp.reportValidity();
    }

    
}

       
      

      /*saveAction(event){
        saveObjAction({cardName:this.ObName,cardDatastore:this.ObjDatastore,cardDescription:this.ObjDescription,cardActive:this.ObjActive})
        .then(result=>{
        this.RecordId = result.Id;
        
        window.console.log('scoreRecordId##Vijay2 ' + this.RecordId);       
        const toastEvent = new ShowToastEvent({
            title:'Success!',
            message:'Record created successfully',
            variant:'success'
          });
          this.dispatchEvent(toastEvent);
          this[NavigationMixin.Navigate]({
            type: 'standard__recordPage',
            attributes: {
                recordId: this.recordId,
                objectApiName: 'Objects__c',
                actionName: 'view'
            },
         });
        })
        .catch(error =>{
           this.errorMsg=error.message;
           window.console.log(this.error);
        });
    }*/

=================================EDIT
<template>
    
    <!--Use template if:true to display/hide popup based on isModalOpen value--> 
    <template if:true={isModalOpen}>
        <lightning-record-edit-form
        record-id={recordId} 
           object-api-name="Objects__c"
     
           onsubmit={handleSubmit}
           onsuccess={handleSuccess}>
                    
                        <lightning-messages>
            </lightning-messages>
       <!-- Modal/Popup Box LWC starts here -->
       <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
           <div class="slds-modal__container">
               <!-- Modal/Popup Box LWC header here -->
               <header class="slds-modal__header">
                   <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                       <lightning-icon name="utility:close"
                           alternative-text="close"
                           variant="bare-inverse"
                           size="small" ></lightning-icon>
                       <span class="slds-assistive-text">Close</span>
                   </button>
                   <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Edit Object</h2>
                </header>
               

                <div class="slds-modal__content slds-p-around_medium slds-grid slds-wrap" id="modal-content-id-1">
                <lightning-combobox 
                field-name="Datastore__c" 
                label="Datastore"
                type="picklist"
                placeholder="--None--"
                value={datastore}
                options={options}
                required="true"
                onchange={handleChange} class="slds-size_1-of-2 slds-p-horizontal_x-small" >
                </lightning-combobox>
               
                
                <template if:true={getSalesforce}>
                   <lightning-combobox type="picklist" 
                   label="Object name" 
                   field-name="Name" 
                onchange={contactChangeVal}
                value={name}
                required="true"
                options={objectList}
                class="slds-size_1-of-2 slds-p-horizontal_x-small" >
                </lightning-combobox>
                <!--template for:each={allObjectList} for:item="ObjectList">
                   <li key={ObjectList.value}>{ObjectList.value}</li>
                 </template-->
               
               </template>
                
               
               <template if:false={getSalesforce}>
                <lightning-input type="text"
                label="Object Name"
                field-name="Name" 
                onchange={contactChangeVal}
                value={name}
                required="true"
                class="slds-size_1-of-2 slds-p-horizontal_x-small">
               </lightning-input>
               </template>
               
               <lightning-textarea type="text" field-name="Description__c"  onchange={contactChangeVal} value={description} label= "Description" class="slds-size_1-of-2 slds-p-horizontal_x-small">
               </lightning-textarea>    
           
                 
               <lightning-input type="checkbox" label= "Active" field-name="Active__c"   checked= "true" class="slds-size_1-of-2 slds-p-horizontal_x-small">
               </lightning-input>
               
               
           </div>    
       
               <!--Modal/Popup Box LWC footer starts here-->
               <footer class="slds-modal__footer">
                   <lightning-button class="slds-m-left_x-small" variant="Neutral" onclick={closeModal} label="Cancel">Cancel</lightning-button>
                   <lightning-button class="slds-m-left_x-small" variant="brand" onclick={insertContactAction} name="save" label="Save"></lightning-button>
               </footer>
          
      
           
           </div>
       </section>
       <div class="slds-backdrop slds-backdrop_open"></div>
    </lightning-record-edit-form>
   </template>

</template>
============================Java Script
import {LightningElement, track, wire, api } from 'lwc';
//import { createRecord } from 'lightning/uiRecordApi';
import getAllObjects from '@salesforce/apex/SFgetobject.getAllObjects';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import {NavigationMixin} from 'lightning/navigation';
import objDatastore from '@salesforce/schema/Objects__c.Datastore__c';
import objjName from '@salesforce/schema/Objects__c.Name';
import objDescription from '@salesforce/schema/Objects__c.Description__c';
import objActive from '@salesforce/schema/Objects__c.Active__c';
import objMainObject from '@salesforce/schema/Objects__c';
import Name from '@salesforce/schema/Account.Name';
import Description from '@salesforce/schema/Account.Description';
//import ACCOUNT_ID_FIELD from '@salesforce/schema/Objects__c.AccountId';
import { getRecord, getFieldValue } from 'lightning/uiRecordApi';
import saveObject from '@salesforce/apex/SFmappingrules.saveObject'
import { updateRecord } from 'lightning/uiRecordApi';

import getObject from '@salesforce/apex/SFobjectEdit.getObject';
import Id from '@salesforce/schema/AcceptedEventRelation.Id';


export default class sFconnectorObject extends NavigationMixin(LightningElement) {

    @api objectApiName;
    @api recordId;

    @wire(getRecord, { recordId: '$recordId', 
                    fields:[objDatastore,objjName,objDescription,objActive ] })
    

    wiredRecordData({ error, data }) {

  if (data) {
    console.log('fire', data);
    this.datastore = getFieldValue(data, objDatastore);

    this.name = getFieldValue(data, objjName);

    this.description = getFieldValue(data, objDescription);

    this.active = getFieldValue(data, objActive) || false;

  } else if (error) {

  }
}
  
    /*objectApiName = objMainObject;
    dataStoreField = DATASTORE_FIELD;
    objectNameField = OBJECTNAME_FIELD;
    descriptionField = DESCRIPTION_FIELD;
    activeField = ACTIVE_FIELD;*/

    //AccountId  = ACCOUNT_ID_FIELD
    @track MappingRecord;
    @track ObName;
    @track ObjDatastore;
    @track ObjDescription;
    @track ObjActive;
    @track objMainObject;
    @track RecoreId;
    @track errorMsg;
    @track isModalOpen = true;
    @track studentMetaObj ={};
    
    @track getSalesforce = false;
    @track objectList = [];
    @track objectName='';
    

    
    connectedCallback() { 
     
       
        
        getAllObjects()
        .then((result) => {
            if (result) {
                this.objectList = [];
                for (let key in result ) {
                    this.objectList.push({"label": result[key], "value": result[key] });
                }
            } else {
                console.log('Error in getting objects ')
            }
        }).catch((error) => {
            console.log('Catch Error in getting objects   ')
        });
    }




    handleSubmit(event) {
        
        console.log('onsubmit event recordEditForm'+ event.detail.fields);
    }
    

    
    closeModal() {  
        // to close modal set isModalOpen tarck value as false
        this.isModalOpen = false;
        
        
        this[NavigationMixin.Navigate]({
            type: 'standard__objectPage',
            attributes: {
                objectApiName: 'Objects__c',
                actionName: 'home'
            },
        });
    
    }  


    get options() {
        return [
            
            { label: 'Salesforce', value: 'Salesforce' },
            { label: 'SAP', value: 'SAP' },
        ];
    }
    
    handleChange(event){
        if(event.target.label=='Datastore'){
            this.datastore = event.target.value;
        }
        this.value = event.detail.value;
        
        if(event.target.name == 'Datastore'){
            this.Objects__c=this.Datastore__c;  
          }
        
        if (this.value=='Salesforce'){
        this.getSalesforce = true;
    
    }
    else
        this.getSalesforce = false;
        this.name ='';

        
      }

      setChange(event){
        //this.Name = event.detail.value;
        //this.Objects__c.Name=this.Name;
        if(event.target.name == 'Name'){
            this.Objects__c.Name=this.Name;  
            console.log('kkk',this);
            }
      }
      scoreHandleChange(event){
        if(event.target.name == 'Description'){
            this.Objects__c.Description__c=this.Description__c; 

          }
          if(event.target.name == 'Active'){
            this.Objects__c.Active__c=this.Active__c; 
          }

      }
      handleSuccess(event){
        if(this.recordId !== null){
            this.dispatchEvent(new ShowToastEvent({
                    title: "SUCCESS!",
                    message: "New record has been created.",
                   variant: "success",
                }),  
           );
           
               
            }
            
        }

        datastore = '';
    name ='';
    description='';
    value='';

    contactChangeVal(event) {
        console.log(event.target.label);
        console.log(event.target.value);        
      
        if(event.target.label=='Object Name'){
            this.name = event.target.value;
        }            
        if(event.target.label=='Description'){
            this.description = event.target.value;
        }
        if(event.target.label=='Active'){
            this.value = event.target.checked;
        }     
        else{
            this.value = event.target.unchecked; 
        }
        
    }
    insertContactAction(){
        const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
            .reduce((validSoFar, inputField) => {
                inputField.reportValidity();
                return validSoFar && inputField.checkValidity();
            }, true);
const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
            .reduce((validSoFar, input_Field_Reference) => {
                input_Field_Reference.reportValidity();
                return validSoFar && input_Field_Reference.checkValidity();
            }, true);            
 if (isInputsCorrect && All_Compobox_Valid) {
        this.isModalOpen = false;
        
        console.log('saverecord',this.selectedAccountId);
        let fields = {};
        fields[Id.fieldApiName]= this.recordId;
        fields[objDatastore.fieldApiName] = this.datastore;
        fields[objjName.fieldApiName] = this.name;
        fields[objDescription.fieldApiName] = this.description;
        //fields[objActive.fieldApiName] = this.value;
       
        const recordInput = {fields};
        console.log('fields',JSON.stringify(recordInput));
        
        console.log('rec',this.recordId);
        updateRecord(recordInput)
        
            .then(result=> {
                console.log('result',result);
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Success',
                        message: 'Record record has been updated',
                        variant: 'success',
                    }),
                );
                this[NavigationMixin.Navigate]({
                    type: 'standard__recordPage',
                    attributes: {
                        recordId: result.id,
                        objectApiName: 'Objects__c',
                        actionName: 'view'
                    },
                });

            })
            .catch(error => {
                this.dispatchEvent(
                    new ShowToastEvent({
                        title: 'Error creating record',
                        message: error.body.message,
                        variant: 'error',
                    }),
                );
            });
    }
    }


       
      

      /*saveAction(event){
        saveObjAction({cardName:this.ObName,cardDatastore:this.ObjDatastore,cardDescription:this.ObjDescription,cardActive:this.ObjActive})
        .then(result=>{
        this.RecordId = result.Id;
        
        window.console.log('scoreRecordId##Vijay2 ' + this.RecordId);       
        const toastEvent = new ShowToastEvent({
            title:'Success!',
            message:'Record created successfully',
            variant:'success'
          });
          this.dispatchEvent(toastEvent);
          this[NavigationMixin.Navigate]({
            type: 'standard__recordPage',
            attributes: {
                recordId: this.recordId,
                objectApiName: 'Objects__c',
                actionName: 'view'
            },
         });
        })
        .catch(error =>{
           this.errorMsg=error.message;
           window.console.log(this.error);
        });
    }*/
}

==================================Detail
<template>
    <lightning-card>
      
        <div class="">
                    <lightning-record-edit-form record-id={recordId} onsuccess={handleSuccess} object-api-name="Objects__c">
                     
                      <div class="slds-modal__content slds-p-around_small slds-grid slds-wrap slds-m-top_none">  
                        <div class="slds-modal__content slds-p-around_small slds-size_1-of-2" >
                          <abbr title="required" class="slds-required">*</abbr>Datastore
                          <div class="slds-grid slds-wrap">
    <lightning-output-field field-name ="Datastore__c" 
    variant="label-hidden"></lightning-output-field>
                          </div>
                          <p class="slds-line-height_reset slds-border_bottom"></p> 
                          <br/>
                          <label>Description</label>
                          <template if:true={showEditField}>
                            
                            <lightning-input-field  field-name= "Description__c" variant="label-hidden">
                            </lightning-input-field>
                              
                                 </template>
                                 <lightning-layout horizontal-align="spread" >
                                  <template if:false={showEditField}>
                                    <lightning-layout-Item>
                                      <lightning-output-field field-name= "Description__c" variant="label-hidden">
                                     </lightning-output-field>
                                     </lightning-layout-Item>

                                     <lightning-layout-Item>
                                      <div class='div-block'>

                                    
                                    <lightning-button-icon variant="bare"  icon-name="utility:edit" onclick={handleEdit}>
                                    </lightning-button-icon>
                              
                                   </div>
                                   </lightning-layout-Item>
                                    </template>
                                    </lightning-layout>

          <p class="slds-line-height_reset slds-border_bottom"></p>             
                </div>
                
                <div class="slds-modal__content slds-p-around_small slds-size_1-of-2" >
                  
                  <abbr title="required" class="slds-required slds-float_left">*</abbr>Object Name
                  <div class="slds-grid slds-wrap">
                          <lightning-output-field field-name ="Name" variant="label-hidden">
                       </lightning-output-field>
                       </div>

                       <p class="slds-line-height_reset slds-border_bottom">  </p> 
                       <br/> 
                       
                        <label>Active</label>
                        <div class="slds-grid slds-wrap">
                      
                       <lightning-output-field field-name= "Active__c"
                       variant="label-hidden">
                       </lightning-output-field>
                       </div>
                       <p class="slds-line-height_reset slds-border_bottom">  </p> 
                      </div>
                  </div>
                     
                 
                  <p class="slds-modal__content slds-p-around_small slds-grid slds-wrap">   </p>     
                  <table class="slds-table slds-theme_shade">
                      <tr class="" >
                          <th class="" scope="col" >
                              <p class=""> <lightning-button-icon icon-name={systemInfoIconName}   class={systemInfoIconClass}   variant="bare"
                                  alternative-text={systemInfoIconLabel} onclick={toggleSection}  ></lightning-button-icon><b>System Information</b></p>  
                          </th>
                          
                      </tr>
                  </table>
                  <template if:true={showSystemInfo}>
                  <div class="slds-grid slds-gutters">
                      <div class="slds-col">
                          <span>
                  <div class="slds-modal__content slds-p-around_small slds-size_1-of-2">
                      <div>Created By</div>
                      <div class="slds-grid slds-wrap">
                          <lightning-output-field field-name="CreatedById" variant="label-hidden" aura-id="createdById"></lightning-output-field>
                          
                              <lightning-output-field field-name="CreatedDate" variant="label-hidden" aura-id="createdDate"></lightning-output-field>
                          </div>
                    
                      <br/>
                     
                  </div>
              </span>
              <p class="slds-line-height_reset slds-border_bottom"></p> 
              </div>
              <div class="slds-col">
                  <span>
                  <div class="slds-modal__content slds-p-around_small slds-size_1-of-2">
                      <div>Last Modified By</div>
                      <div class="slds-grid slds-wrap">
                          <lightning-output-field field-name="LastModifiedById" variant="label-hidden" aura-id="lastModifiedById"></lightning-output-field>
                          <div class="slds-p-left_x-small">
                              <lightning-output-field field-name="LastModifiedDate" variant="label-hidden" aura-id="lastModifiedDate"></lightning-output-field>
                          </div> 
                      </div>
                      <br/>
                      
                  
                  </div>
              </span>
              <p class="slds-line-height_reset slds-border_bottom">  </p> 
              </div>
              
          
          </div>
          </template>
              
         
                   <template if:true={getSalesforce}>
                    <footer class="slds-modal__footer">
                       <div class="slds-align_absolute-center">
                        <lightning-button class="slds-m-left_x-small slds-float_none" variant="Neutral" onclick={handleCancel} label="Cancel">Cancel</lightning-button>
                        <lightning-button type="submit" variant="brand" onclick={handleSave} name="submit" label="Save">
                        </lightning-button>                       </div>
                    </footer>
                
                </template>
              </lightning-record-edit-form> 
        </div>
    </lightning-card>
</template>
========================================Java Sript
import { LightningElement, api, track,  } from 'lwc';
import DATASTORE from "@salesforce/schema/Objects__c.Datastore__c";
import OBJECT_NAME from "@salesforce/schema/Objects__c.Name";
import DESCRIPTION from "@salesforce/schema/Objects__c.Description__c";
export default class SFconnectorobjectdetail extends LightningElement {
     
    @track getSalesforce = false;
    @track showEditField = false;
    @api recordId;
    @api objectApiName;
   @api fieldList = [DATASTORE, OBJECT_NAME, DESCRIPTION];
   @track OBJECT_NAME;
   @track DATASTORE;
   @track DESCRIPTION;


   @track showCreatedBy=false;
    @track isEditMode = false;
    @track hidebutton=false;
    @track showSystemInfo=false;
    @track activeTabValue = 'details';
    systemInfoIconName = 'utility:chevrondown';


    connectedCallback(){

        this.showSystemInfo=true;
    }

   handleEdit() {
    this.getSalesforce=true
    
    this.showEditField = !this.showEditField;
}
handleSuccess(event) {
    this.showEditField = false;
}

handleCancel(){

    this.getSalesforce=false
    this.showEditField = false;
}
handleSave(){
    this.getSalesforce=false
}

toggleSection() {
    this.showSystemInfo = !this.showSystemInfo;
    if (this.showSystemInfo) {
        this.systemInfoIconName = 'utility:chevrondown';
        this.systemInfoIconLabel = 'Show System Information';
    } else {
        this.systemInfoIconName = 'utility:chevronright';
        this.systemInfoIconLabel = 'Hide System Information';
    }
}

  }
=======================================ObjectFields

<template>

    <span class="slds-assistive-text">Object Fields</span>
<div class="slds-media__body">
<h2 class="slds-card__header-title">
  <a href="#" class="slds-card__header-link slds-truncate" title="Object Fields">
    <span>Object Fields ({count})</span>
  </a>
</h2>
</div>
    <lightning-card >
            <lightning-button label="Add Fields" onclick = "{openModel}" slot="actions" class="slds-button_neutral" ></lightning-button>
            <lightning-button label="Edit Fields" onclick = "{editModel}" slot="actions" class="slds-button_neutral"></lightning-button>
            <div class="slds-card__body">
            <table class="slds-table slds-table_cell-buffer  slds-no-row-hover slds-table_bordered slds-table_fixed-layout" role="grid" aria-label="Example table in a Card">
                <thead>
                    <tr class="slds-line-height_reset">
                        
                        <th >
                        </th>
                        <th class="" scope="col">
                            <div class="slds-truncate" title="FIELD NAME">FIELD NAME</div>
                        </th>
                        <th class="" scope="col">
                            <div class="slds-truncate slds-truncate slds-align_absolute-center" title="DESCRIPTION">DESCRIPTION</div>
                        </th>
                        <template if:true={getSalesforce}>
                        <th class="" scope="col">
                            <div class="slds-truncate" onchange={handleChange} title="DATATYPE">DATA TYPE </div>
                        </th>
                    </template>
                    
                        <th class="" scope="col">
                            <div class="slds-truncate slds-truncate slds-align_absolute-center" title="DELETE">DELETE</div>
                        </th> 
                    </tr>
                </thead>
                <tbody>
                    <template for:each={dataList} for:item="obf" for:index="index" >
                        <tr key={obf.index}>
                            <td>
                                <div class="slds-truncate slds-truncate slds-align_absolute-center">
                                {obf.index}
                            </div>
                            </td>
                                <td>
                                
                                {obf.Name}
                                
                                  </td>
                            <td>                              
                                        
                            <lightning-textarea name="description" 
                            class="slds-truncate slds-align_absolute-center"
                            data-index={index} 
                            disabled="true"
                            value={obf.Description__c}>
                            </lightning-textarea>

                            </td>
                            <template if:true={getSalesforce}>
                            <td>
                       {obf.Datatype__c} 
                    
                       </td>
                        </template>
                        <td>
                            
                                <lightning-button-icon icon-name="action:delete" class="slds-truncate slds-align_absolute-center" data-index={index}  onclick={deleteAccount} alternative-text="Delete"  title="Delete"></lightning-button-icon>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div> 
        
            </lightning-card>
            
    <template if:true={isModalOpen}>
        <!-- Modal/Popup Box LWC starts here -->
        <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <!-- Modal/Popup Box LWC header here -->
                <header class="slds-modal__header">
                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                        <lightning-icon icon-name="utility:close"
                            alternative-text="close"
                            variant="inverse"
                            size="small" ></lightning-icon>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Add Fields</h2>
                 </header>
            <div class="slds-modal__content slds-p-around_medium slds-grid slds-wrap" id="modal-content-id-1" >
<!--Modal/Popup Box Body-->

<table class="slds-table slds-table_bordered slds-table_cell-buffer"> 
        <thead>
        <tr>
            <th class="" scope="col">
        </th>
            <th class="" scope="col">
                <abbr title="required" class="slds-required">*</abbr>FIELD NAME
                <div class="slds-truncate slds-align_absolute-center" title="FIELD NAME"></div>          
            </th>
            <th class="" scope="col">
            <div class="slds-truncate slds-align_absolute-center" title="DESCRIPTION">DESCRIPTION</div>
            </th>  

            <template if:true={getSalesforce}>
                <th class="" scope="col">
                    <abbr title="required" class="slds-required">*</abbr>DATATYPE
                    <div class="slds-truncate" title="DATATYPE"></div>
                </th>
            </template>
        
            
            <th class="" scope="col">
                <div class="slds-truncate slds-align_absolute-center" title="DELETE">DELETE</div>
                </th>
                
            
            </tr>
            </thead>


             <tbody>
                <template for:each={filterList} for:item="filterData" for:index="index">
                    <tr key={filterData.index}>
        <td>
            {filterData.index}
        </td>
        <template if:false={getSalesforce}>
            <td scope="col">
              <div class="slds-truncate" title="FIELD NAME">
                  
                  <lightning-combobox
                  name="name"
                  value={filterData.Name}
                  placeholder="Select Progress"
                  required="true"
                  variant="label-hidden"
                  options={pickval}
                  onchange={handleChange} data-index={index}>
                 
              </lightning-combobox>
              </div>
            </td>
            </template>

            <template if:true={getSalesforce}>
            <td scope="col">
                <div class="slds-truncate" title="FIELD NAME" >
                <lightning-input
                  type="text" 
                  name="name"
                  required="true"
                  variant="label-hidden" 
                  value={filterData.Name}
                  onchange={handleChange}
                  
                     data-index={index}>
                </lightning-input>
                </div>
              </td>
              </template>

              
          <td class="" scope="col">
            <div class="slds-truncate" title="DESCRIPTION">
                <lightning-textarea name="description" data-index={index} onchange={handleChange} value={filterData.Description__c}></lightning-textarea>
            </div>  
        </td>
        <template if:true={getSalesforce}>
        <td class="" scope="col">
            <div class="slds-truncate" title="DATATYPE">
                <lightning-combobox name="datatype" required="true" data-index={index}  
                value={filterData.Datatype__c} 
                options={options}
                variant="label-hidden"
                onchange={handleChange} >
                 </lightning-combobox>
            </div>    
        </td>
    </template>
    
          <td class="" scope="col">
            <div class="slds-truncate slds-align_absolute-center" title="DELETE">
                <lightning-button-icon data-index={filterData.index} class="slds-float--right" 
                icon-name="action:delete"
                onclick={handleRemoveRow}>
            </lightning-button-icon>
            </div>
                  </td>      
        </tr>
        
        </template>
      </tbody>
            </table>
            <lightning-button label="Add Row" title="Add Row" onclick={handleAddRow}></lightning-button>
            </div>
            <footer class="slds-modal__footer">
            <lightning-button label="Cancel" title="Cancel action" onclick={closeModal}></lightning-button> 
            <lightning-button label="Save" variant="brand" title="Save action" onclick={saveRows}></lightning-button> 

        </footer>
            </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open" role="presentation"></div>
            </template>


<!--- Edit Fields Modal-->

<template if:true={editModalOpen}>
    <!-- Modal/Popup Box LWC starts here -->
    <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
        <div class="slds-modal__container">
            <!-- Modal/Popup Box LWC header here -->
            <header class="slds-modal__header">
                <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                    <lightning-icon icon-name="utility:close"
                        alternative-text="close"
                        variant="inverse"
                        size="small" ></lightning-icon>
                    <span class="slds-assistive-text">Close</span>
                </button>
                <h2 id="modal-heading-02" class="slds-text-heading_medium slds-hyphenate">Edit Fields</h2>
             </header>
        <div class="slds-modal__content slds-p-around_medium slds-grid slds-wrap" id="modal-content-id-2" >
<!--Modal/Popup Box Body-->

<table class="slds-table slds-table_bordered slds-table_cell-buffer"> 
    <thead>
    <tr>
        <th class="" scope="col">
      
        </th>
        
        <th class="" scope="col">
            <abbr title="required" class="slds-required">*</abbr>FIELD NAME
            <div class="slds-truncate slds-align_absolute-center" title="FIELD NAME"></div>          
        </th>
        <th class="" scope="col">
        <div class="slds-truncate slds-align_absolute-center" title="DESCRIPTION">DESCRIPTION</div>
        </th>  

        <template if:true={getSalesforce}>
            <th class="" scope="col">
                <abbr title="required" class="slds-required">*</abbr>DATATYPE
                <div class="slds-truncate" title="DATATYPE"></div>
            </th>
        </template>
    
        
        <th class="" scope="col">
            <div class="slds-truncate slds-align_absolute-center" title="DELETE">DELETE</div>
            </th>
            
        
        </tr>
        </thead>


         <tbody>
            <template for:each={filterList1} for:item="filterField" for:index="index">
                <tr key={filterField.index}>
    <td>
        {filterField.index}
    </td>


        <template if:true={getSalesforce}>
        <td scope="col">
            <div class="slds-truncate" title="FIELD NAME">
                <lightning-input
              name="name" 
              required="true"
              variant="label-hidden"
              value={filterField.Name}
              onchange={handleditChange}
                 data-index={index}>
            </lightning-input>
            </div>
          </td>
          </template>

          <template if:false={getSalesforce}>
      <td scope="col">
        <div class="slds-truncate" style="overflow: initial;" title="FIELD NAME">
            <lightning-combobox
            name="name"
            value={filterField.Name}
            placeholder="Select Progress"
            options={pickval}
            required="true"
            variant="label-hidden"
            onchange={handleditChange} 
            data-index={index}>
        </lightning-combobox>
        </div>
      </td>
      </template>
      <td class="" scope="col">
        <div class="slds-truncate" title="DESCRIPTION">
            <lightning-textarea 
            name="description" 
            data-index={index} 
            onchange={handleditChange} 
            value={filterField.Description__c}>
        </lightning-textarea>
        </div>  
    </td>
    <template if:true={getSalesforce}>
    <td class="" scope="col">
        <div class="slds-truncate" title="DATATYPE">
            <lightning-combobox 
            name="datatype" 
            data-index={index}  
            required="true"
            variant="label-hidden"
            value={filterField.Datatype__c} 
            options={options}
            onchange={handleditChange} >
             </lightning-combobox>
        </div>    
    </td>
</template>

      <td class="" scope="col">
        <div class="slds-truncate slds-align_absolute-center" title="DELETE">
            <lightning-button-icon 
            data-index={index} class="slds-float--right" 
            icon-name="action:delete"
            onclick={handleEditRemoveRow}>
        </lightning-button-icon>
        </div>
              </td>      
    </tr>
    
    </template>
  </tbody>
        </table>
    
        </div>
        <footer class="slds-modal__footer">
        <lightning-button label="Cancel" title="Cancel action" onclick={closeModal}></lightning-button> 
        <lightning-button label="Save" variant="brand" title="Save action" onclick={popupRows}></lightning-button> 

    </footer>
        </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open" role="presentation"></div>
        </template>
            </template>
============================================Java Script Object Field
/*import Datastore__c from '@salesforce/schema/Objects__c.Datastore__c';
import OBJFIELD_OBJECT from '@salesforce/schema/Objectfield__c';
import FIELD_NAME from '@salesforce/schema/Objectfield__c.Name';
import DESCRIPTION from '@salesforce/schema/Objectfield__c.Description__c';
import DATATYPE from '@salesforce/schema/Objectfield__c.Datatype__c';

import { deleteRecord } from 'lightning/uiRecordApi';
import getAllfields from '@salesforce/apex/datastore.getAllfields';
import { getRecord } from 'lightning/uiRecordApi';
import { NavigationMixin } from 'lightning/navigation';
//import getAllObjectList from '@salesforce/apex/datastore.getAllObjectList';
import getAllObjectList from '@salesforce/apex/datastore.getAllObjectList';
import Data from '@salesforce/schema/QuoteTemplateRichTextData.Data';
//import getPickListvaluesByFieldName from '@salesforce/apex/datastore.getPickListvaluesByFieldName'*/;

import {LightningElement, track, wire, api } from 'lwc';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import fieldRec from '@salesforce/apex/datastore.fieldRec';
import Datastoreval from '@salesforce/apex/datastore.Datastoreval';
import saveAccounts from '@salesforce/apex/datastore.saveAccounts';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import getAllPicklistTypeFields from '@salesforce/apex/datastore.getAllPicklistTypeFields';
import getAllfields from '@salesforce/apex/SFgetobject.getAllfields';
import getObjectPickList from '@salesforce/apex/datastore.getObjectPickList';
import { deleteRecord } from 'lightning/uiRecordApi';
import {refreshApex} from '@salesforce/apex';
import deleteRow from '@salesforce/apex/datastore.deleteRow';
import { createRecord } from 'lightning/uiRecordApi';
import objMainObjectedit from '@salesforce/schema/Objectfield__c';
import objjName from '@salesforce/schema/Objectfield__c.Name';
import objDescription from '@salesforce/schema/Objectfield__c.Description__c';
import objDatatype from '@salesforce/schema/Objectfield__c.Datatype__c';
import { NavigationMixin } from 'lightning/navigation';
import EditID from '@salesforce/schema/Objectfield__c.Objects__c';
export default class sFobjectfield extends LightningElement {
    
    @track delrow;
    @track getSalesforce=false;
    @track isModalOpen = false;
    @track objectNameToGetFields;
    @track lstFields=[];
    @api recordId;
    @api objectApiName;
    @track filterList = [];
    @track filterList1 =[];
   @track indexsrno=1;
    @track accList;
    @track dataval;
    @track rowval;
    @track rowremove;
    @track dataList = [];
    @track lstOfPicklistFields = [];
    
    @track mapofPickListValues = [];
    @track objectFieldOptionsList = [];
    @track picklistFieldsLabel = 'Picklist Fields'
    fieldSelectedToGetPicklistTypeField = '';
    @track objectName = ''; 
    @track Name = '';
    @track Rowsave;
    @track error;
    @track fieldsdata = [];
    @track objectOptions = [];
    @track recremove;
    @track record;
    @track accounts;
    @track objectList=[];
    @track error;
    @track editModalOpen= false;
    @track wiredAccountsResult;
    @track count;
    @track objectList = [];
    @track allFields=[];
    objectName = '';

   connectedCallback() { 
    getAllfields()
        .then((result) => {
            console.log('re',result);
            if (result) {
                console.log('re',result);
                
                this.allFields=[];
            
                for (let key in result ) {
                    this.allFields.push({"label": result[key], "value": result[key]});   
                }  
            } 
        }).catch((error) => {
            
            console.log('Catch Error in getting Fields   ')
        });
    }

/*handleGetPicklistFields(){
    
    
    getAllfields({objectName: this.objectNameToGetFields})
    
    .then(result => {
        console.log('resultt',result);
        this.lstOfPicklistFields = [];
        console.log('this.lstOfPicklistFields',this.lstOfPicklistFields);

        for (let key in result) {
            this.lstOfPicklistFields.push({ label: key, value: key });
        }
    })
    .catch(error => {
        console.log('Error in getting picklist fields');
    })
}*/


    @wire(Datastoreval,{recordId: '$recordId'})
    wiredval({ error, data })
    {
        if(data)
        {
          this.dataval = data.Datastore__c;
          //this.objectNameToGetFields = data.Name;
          //this.handleGetPicklistFields();
          console.log('this.dataval',this.dataval);
          

    } 
    else if (error);
    { 
        
        console.log('error ', error);
         this.error = error; 
    }
    if(this.dataval == 'SAP'){
        this.getSalesforce=true;
    }
    else{
    this.getSalesforce=false;
    }
}

@wire(getObjectPickList,{recordId:'$recordId'})
wiredFields({ error, data }) {
    if (error) {   
        console.log(error); 
    } else 
    if (data) {  
    console.log(data);    
    let options = [];    
    var objName=data[1];
    if (objName) {   
        console.log('data', data); 
        objName.forEach((r) => {    
            options.push({    
        label: r,    
        value: r    
    });    
    });    
    } 
    this.pickval = options;
}
        else if (error) 
        {
            console.log('error ', error);
            this.error = error; 
        }
    }
    


get options() {
    return [
        { label: 'None', value: '' },
        { label: 'Checkbox', value: 'Checkbox' },
        { label: 'Currency', value: 'Currency' },
        { label: 'Date ', value: 'Date' },
        { label: 'Number', value: 'Number' },
        { label: 'Reference', value: 'Reference' },
        { label: 'Text', value: 'Text' },
        { label: 'Text Area', value: 'Text Area' },
    ];
}




openModel () {
    
    this.isModalOpen = true;
    this.editModalOpen= false;
    this.filterList.push({
        sObjectType:'Objectfield__c',
        Name: '',
        Description__c: '',
        Datatype__c: '',
        Objects__c:this.recordId,
        index:this.indexsrno
        //id: ++this.keyIndex
    })
}

editModel () {  

    this.isModalOpen = false;
    this.editModalOpen= true;

   this.filterList1 = JSON.parse(JSON.stringify(this.dataList));
   
    
}

closeModal() {  
    // to close modal set isModalOpen tarck value as false
    this.isModalOpen = false;
    this.editModalOpen= false;
    this.filterList = [];
    this.indexsrno = 1;
} 

handleChange(event) {
    if (event.target.name=='name') {
        this.filterList[event.currentTarget.dataset.index].Name = event.target.value;
        console.log('editname',this.filterList[event.currentTarget.dataset.index].Name);
    }
    else if (event.target.name=='description') {
        this.filterList[event.currentTarget.dataset.index].Description__c = event.target.value;
        console.log('editname',this.filterList[event.currentTarget.dataset.index].Description__c);
    }
    else if (event.target.name=='datatype') {
        this.filterList[event.currentTarget.dataset.index].Datatype__c = event.target.value;
    }
}

handleditChange(event) {
    if (event.target.name=='name') {
        this.filterList1[event.currentTarget.dataset.index].Name = event.target.value;
        console.log('editname',this.filterList1[event.currentTarget.dataset.index].Name);
    }
    else if (event.target.name=='description') {
        this.filterList1[event.currentTarget.dataset.index].Description__c = event.target.value;
        console.log('editname',this.filterList1[event.currentTarget.dataset.index].Description__c);
    }
    else if (event.target.name=='datatype') {
        this.filterList1[event.currentTarget.dataset.index].Datatype__c = event.target.value;
    }
}

handleAddRow() {
    this.indexsrno = this.filterList.length + 1;
    this.filterList.push({
        sObjectType: 'Objectfield__c',
        Name: '',
        Description__c: '',
        Datatype__c: '',
        Objects__c: this.recordId,
        index: this.indexsrno
    });

    //this.filterList = [...this.filterList, objRow];
    console.log('filterList',this.filterList);
    console.log('filterList',JSON.stringify(this.filterList));

}
handleRemoveRow(event) {
    var selectedItem = event.currentTarget;
    var index = selectedItem.dataset.record;
    this.filterList.splice(index, 1);
    this.filterList.forEach((item, i) => {
        item.index = i + 1;
    });
}

handleEditRemoveRow(event) {

    const selectedIndex = event.currentTarget.dataset.index;
    const index = parseInt(selectedIndex, 10);
    console.log('ind',index);
    this.filterList1.splice(index, +1);
    this.filterList1.forEach((item, i) => {
      item.index = i + 1;
  });
  this.deleteAccount(event)
  
}


saveRows() {
    const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
    .reduce((validSoFar, inputField) => {
        inputField.reportValidity();
        return validSoFar && inputField.checkValidity();
    }, true);
    const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
    .reduce((validSoFar, input_Field_Reference) => {
        input_Field_Reference.reportValidity();
        return validSoFar && input_Field_Reference.checkValidity();
    }, true);            
if (isInputsCorrect && All_Compobox_Valid) {
 
    console.log('this.filterList => ', JSON.stringify(this.filterList));
    this.isSpinner = true;
    saveAccounts({ lstAccs: this.filterList,  recordId:this.recordId}).then(result => {
        console.log('objresu',result);
        this.isSpinner = false;
        this.showToastMessage('success', 'Record Saved Successfully!!', 'Success');
        this.dataList=result;
        this.count=this.dataList.length;
        console.log('count',this.count);
        let tempresult=result;

        this.dataList = tempresult.map((result, index) => {

            return {...result,index: index+1};

        });
        this.isModalOpen = false;
        this.filterList = [];
      this.indexsrno = 1;
        console.log('result ==> ', result);
    }).catch(error => {
        this.processErrorMessage(error);
        this.isSpinner = false;
        this.isModalOpen = false;
    })
}
}
processErrorMessage(message) {
    let errorMsg = '';
    if (message) {
        if (message.body) {
            if (Array.isArray(message.body)) {
                errorMsg = message.body.map(e => e.message).join(', ');
            } else if (typeof message.body.message === 'string') {
                errorMsg = message.body.message;
            }
        }
        else {
            errorMsg = message;
        }
    }
    this.showToastMessage('error', errorMsg, 'Error!');
}

showToastMessage(variant, message, title) {
    this.dispatchEvent(
        new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        })
    );

}
popupRows() {
    const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
    .reduce((validSoFar, inputField) => {
        inputField.reportValidity();
        return validSoFar && inputField.checkValidity();
    }, true);
    const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
    .reduce((validSoFar, input_Field_Reference) => {
        input_Field_Reference.reportValidity();
        return validSoFar && input_Field_Reference.checkValidity();
    }, true);            
if (isInputsCorrect && All_Compobox_Valid){
    
    console.log('this.filterList1 => ', JSON.stringify(this.filterList1));
    this.isSpinner = true;
    saveAccounts({ lstAccs: this.filterList1, recordId:this.recordId }).then(result => {
        this.isSpinner = false;
        this.showToastMessage('success', 'Records Updated Successfully!!', 'Success');
        
        let tempresult=result;

        this.dataList = tempresult.map((result, index) => {

            return {...result,index: index+1};

        });
        this.editModalOpen= false;
        console.log('result ==> ', result);
    }).catch(error => {
        this.processErrorMessage(error);
        this.isSpinner = false;
    })
}
}
processErrorMessage(message) {
    let errorMsg = '';
    if (message) {
        if (message.body) {
            if (Array.isArray(message.body)) {
                errorMsg = message.body.map(e => e.message).join(', ');
            } else if (typeof message.body.message === 'string') {
                errorMsg = message.body.message;
            }
        }
        else {
            errorMsg = message;
        }
    }
    this.showToastMessage('error', errorMsg, 'Error!');
}

showToastMessage(variant, message, title) {
    this.dispatchEvent(
        new ShowToastEvent({
            title: title,
            message: message,
            variant: variant
        })
    );
}


@wire(fieldRec,{recordId: '$recordId'})
Rowsave({ error, data })
{
    if(data)
    {
    console.log('daaaata',data);
    this.dataList=data;
    this.count=this.dataList.length;
            console.log('count',this.count);
    let tempresult=data;

        this.dataList = tempresult.map((data, index) => {

            return {...data,index: index+1};

        });
} 
else if (error);
{ 
    console.log('error ', error);
     this.error = error; 
}

}
   

    deleteAccount(event) {
        
       

        console.log('Current Index', event.currentTarget.dataset.index);

        let delrec = this.dataList[event.currentTarget.dataset.index];

        console.log('fieldrec', delrec);

        deleteRow ({ deletedrecordId: delrec, recordId: this.recordId})

        .then ((result) => {
 console.log('delresult',result)
            this.dataList=result;
            this.count=this.dataList.length;
            console.log('count',this.count);

            let resultArray=result;

            this.dataList = resultArray.map((record, index) => {

                return {...record,index: index+1};

            });
           
            this.dispatchEvent(
                new ShowToastEvent({
                    title : 'Success',
                    message : 'Record Deleted',
                    variant : 'success'
                })
            );
          

        })

      }
}
 

==============================================Apex
public with sharing class SFgetobject {
    @AuraEnabled(cacheable = true)
    public static Map<String,String> getAllObjectList() {
        Map<String,String> mapOfAllObject = new  Map<String,String>();
       
        for(Schema.SObjectType objTyp : Schema.getGlobalDescribe().Values())
        {
            Schema.DescribeSObjectResult describeSObjectResultObj = objTyp.getDescribe();
            String name = objTyp.getDescribe().getLocalName();
            String label = objTyp.getDescribe().getLabel();
            mapOfAllObject.put(name,label);
        }
       
    
        return mapOfAllObject;
}
//Fetch AllObjects Using List//
@AuraEnabled(cacheable = true)
     public static List<String> getAllObjects() {
        List<String> objectList = new List<String>();
        List < Schema.SObjectType > gd = Schema.getGlobalDescribe().Values();      
        for(SObjectType Obj : gd){
            objectList.add(Obj.getDescribe().getName());
        }
        objectList.sort();
        return objectList;
    }

            @AuraEnabled
            public static void insertAcc(account acc){
                try{
                    insert ACC;
                    system.debug('ACC'+ACC);
                }catch(Exception ex){
                    throw new AuraHandledException(ex.getMessage());
                }
            }
            @AuraEnabled(cacheable = true) 
            public static List<String> getAllfields(String objectName){
            List<String> allFields = new List<String>();
            
            Map<String, Schema.SObjectType> objectMap = Schema.getGlobalDescribe();
            SObjectType objType = objectMap.get(objectName);
            
            // Map of fields with api name and Api name as value
            Map<String,Schema.SObjectField> objTypeFields = objType.getDescribe().fields.getMap();
            if(!objTypeFields.isEmpty()){
            for (String fieldName: objTypeFields.keySet()) {
            //getting labels of the fields
            String fieldLabel = objTypeFields.get(fieldName).getDescribe().getLabel();
            allFields.add(fieldLabel);
            }
            }
            
            System.debug('allFields'+allFields);
            allFields.sort();
            return allFields;
            }
    }

================================ObjectEdit Apex
public with sharing class SFobjectEdit {
    @AuraEnabled(cacheable = true)
    public static Map<String, String> getAllObject(){

        Map<String,String> returnObjectMap = new Map<String,String>();
        
        //Schema.getGlobalDescribe() => return a Map of type Map<String, Schema.SObjectType>
        Map<String, Schema.SObjectType> objectMap = Schema.getGlobalDescribe();
        
        //get List of all sObject
        List<Schema.SObjectType> objectMapValues = objectMap.Values();
        System.debug('All Objects '+ objectMapValues);
        
        //prepare a Map to send Data from Server to Client Side
        
        for(Schema.SObjectType objType : objectMapValues){
        String key = objType.getDescribe().getName();
        String value = objType.getDescribe().getLabel();
        returnObjectMap.put(key,value);
        }
        System.debug(returnObjectMap);
        if(returnObjectMap != null && returnObjectMap.size() > 0){
        return returnObjectMap;
        }else{
        return null;
        }
        }
        
        @AuraEnabled
        public static List<Objects__c> getObject(String recordId)
           {
        
             return [SELECT Id, Name, Datastore__c, Description__c, Active__c FROM Objects__c where Id =: recordId];
               
 }  
           
           @AuraEnabled(cacheable = true) 
           public static List<Objects__c> saveObject (List<Objects__c> allEditList, Id recordId)
           {
           system.debug('accList'+allEditList);
       upsert allEditList; 
    
       return [SELECT Id, Name, Datastore__c, Description__c, Active__c FROM Objects__c where Id =: recordId];
    }
    

}
======================================= Apex for Both ObjField and New
public with sharing class datastore {
    @AuraEnabled(cacheable = true)
    public static Objects__c Datastoreval(Id recordId) 
    {
        return [SELECT Id, Datastore__c, Description__c, Active__c, Name FROM Objects__c WHERE Id=:recordId];
        
    }



    //Fetch Fields//

   
    
    @AuraEnabled(cacheable = true)
    public static Map<String,String> getAllObjectList(){ 
        Map<String,String> mapOfAllObject = new  Map<String,String>();
        for(Schema.SObjectType objTyp : Schema.getGlobalDescribe().Values())
        {
            Schema.DescribeSObjectResult describeSObjectResultObj = objTyp.getDescribe();
            String name = objTyp.getDescribe().getLocalName();
            String label = objTyp.getDescribe().getLabel();
            mapOfAllObject.put(name,label);     
        }
        return mapOfAllObject;
    }
    @AuraEnabled(cacheable=true)
    public static Map<String,String> getAllPicklistTypeFields(String strAccountName) {
        Map<String, Schema.SObjectType> detail = Schema.getGlobalDescribe();
        Map<String,String> mapOfPicklistTypeFields = new  Map<String,String>();
        for(Schema.SObjectField fields :detail.get(strAccountName).getDescribe().fields.getMap().Values()) {
            If(fields.getDescribe().getType() == Schema.DisplayType.PICKLIST) { 
                mapOfPicklistTypeFields.put(fields.getDescribe().getName() , fields.getDescribe().getName());
            }
            If(fields.getDescribe().getType() == Schema.DisplayType.INTEGER) { 
                mapOfPicklistTypeFields.put(fields.getDescribe().getName() , fields.getDescribe().getName());
            }
            If(fields.getDescribe().getType() == Schema.DisplayType.String) { 
                mapOfPicklistTypeFields.put(fields.getDescribe().getName() , fields.getDescribe().getName());
            }
        }
        
        return mapOfPicklistTypeFields;
    }
    @AuraEnabled(cacheable = true)
    public static Map<String,String> getOptionsForSelectedPicklistField(string selectedObjectName, string selectedField){
        try {
            System.debug('selectedObjectName '+selectedObjectName);
            System.debug('selectedField '+selectedField);
            Map<String,String> options = new  Map<String,String>(); 
            Map<String, Schema.SObjectField> mapFields = Schema.getGlobalDescribe().get(selectedObjectName).getDescribe().fields.getMap();
            Schema.DescribeFieldResult pickFieldResult = mapFields.get(selectedField).getDescribe();   
            List<Schema.PicklistEntry> picklistFields1 = pickFieldResult.getPicklistValues();
                for( Schema.PicklistEntry pickListFields2 : picklistFields1)
                {
                    options.put(pickListFields2.getLabel(),pickListFields2.getValue());
                }       
            return options;
        } catch (Exception e) {
            return null;
        }
    }
   
@AuraEnabled(cacheable = true) 
public static List<String> getAllfields(String objectName){
List<String> allFields = new List<String>();

Map<String, Schema.SObjectType> objectMap = Schema.getGlobalDescribe();
SObjectType objType = objectMap.get(objectName);

// Map of fields with api name and Api name as value
Map<String,Schema.SObjectField> objTypeFields = objType.getDescribe().fields.getMap();
if(!objTypeFields.isEmpty()){
for (String fieldName: objTypeFields.keySet()) {
//getting labels of the fields
String fieldLabel = objTypeFields.get(fieldName).getDescribe().getLabel();
allFields.add(fieldLabel);
}
}

System.debug('allFields'+allFields);
return allFields;
}

@AuraEnabled(cacheable=true)

    public static List<List<String>> getObjectPickList(Id recordId){
    List<List<String>> CombinedList=new List<List<String>>();
        List<String> objectPicklist = new List<String>();
         List<String> objectDataStore = new List<String>();
        //Qyery 10 accounts
        Objects__c accList = [SELECT Id, Name, Datastore__c FROM Objects__c WHERE Id=:recordId LIMIT 1];
        //return list of accounts
        objectDataStore.add(accList.Datastore__c);
        CombinedList.add(objectDataStore);
        if(accList.Datastore__c == 'Salesforce'){
        objectPicklist = getAllfields(accList.Name);
         }
         else{
       
        }
        objectPicklist.sort();
        system.debug(objectPicklist);
        CombinedList.add(objectPicklist);
        system.debug(CombinedList);
        return CombinedList;
        
       }




//--saveFields---//
/*@AuraEnabled
public static List<Objectfield__c> saveAccounts(List<Objectfield__c> allList, String recordId) 
{    upsert allList;        
    return [SELECT Id, Name, Description__c, Datatype__c FROM Objectfield__c WHERE Id=:recordId];
 }*/
@AuraEnabled
 public static List<Objectfield__c> saveAccounts(List<Objectfield__c> lstAccs, Id recordId) {
    try {
        System.debug('lstAccs'+lstAccs);
        upsert lstAccs;
        System.debug(lstAccs);
        return [SELECT Id, Objects__c, Datatype__c, Description__c, Name FROM Objectfield__c WHERE Objects__c=: recordId ];
    }
    catch(Exception ex) {
        throw new AuraHandledException(ex.getMessage());
     }
}
@AuraEnabled(cacheable = true)
    public static List<Objectfield__c> fieldRec(Id recordId) 
	{   
        System.debug('fieldRec'+recordId);
     return [SELECT Id, Name, Description__c, Datatype__c, Objects__c FROM Objectfield__c WHERE Objects__c =:recordId]; 
  
     
      
    }
    @AuraEnabled
    public static List<Objectfield__c> deleteRow(Objectfield__c deletedrecordId, Id recordId){
    delete deletedrecordId;
    return [SELECT Id, Name, Description__c, Datatype__c, Objects__c FROM Objectfield__c WHERE Objects__c =:recordId]; 
 
}
}


===========================SFmappingrules
<template>
   
        <h2 class="slds-card__header-title">
            <a href="#" class="slds-card__header-link slds-truncate" title="Mapping Rules">
              <span>Mapping Rules({count})</span>
            </a>
          </h2>
        
          <lightning-card >
            <div class="slds-m-around--xx-small">
                <div class="container-fluid">
                    <table class="slds-table slds-table_bordered slds-table_cell-buffer"> 
                        <thead>
                    <tr class="slds-text-title_caps">
                <th scope="col">
                    <div class="slds-truncate" title="SR.NO ">SR.NO</div> 
                </th>
                <th class="" scope="col">
                    <abbr title="required" class="slds-required">*</abbr>TRANSFORMATION TYPE
                    <div class="slds-truncate" title="TRANSFORMATION TYPE "></div>          
                </th>
                <th class="" scope="col">
                    <abbr title="required" class="slds-required">*</abbr>TRANSFORMATION VALUE
                <div class="slds-truncate" title="TRANSFORMATION VALUE"></div>
                </th>  
                <th class="" scope="col">
                    <div class="slds-truncate" title=" "></div>
                </th>

                    <th class="" scope="col">
                        <abbr title="required" class="slds-required">*</abbr>TARGET FIELD
                        <div class="slds-truncate" title="TARGET FIELD"></div>
                    </th>
               
                    <th class="" scope="col">
                        <div class="slds-truncate" title="MANDATORY">MANDATORY</div>
                    </th>
                
                <th class="" scope="col">
                    <div class="slds-truncate" title="DELETE">DELETE</div>
                    </th>
                    
                
                </tr>
                </thead>
      <tbody>
        <template for:each={filterList} for:item="filterData" for:index="index">
            <tr key={filterData.index}>
                
    <td>
        <div class="slds-truncate slds-align_absolute-center">
        {filterData.index}
    </div>
    </td>
    
            <td scope="col">
                <div class="slds-truncate " style="overflow: initial;"
                title="TRANSFORMATION TYPE ">
                    <lightning-combobox 
                    name="Transformation_type__c"
                    value={filterData.Transformation_type__c}
                    onchange={showContainerData}
                    required="true"
                    variant="label-hidden"
                    options={pick}
                    
                    data-index={index}>
                </lightning-combobox>
                </div>
              </td>
    
              <td scope="col">
                <div class="slds-truncate  " 
                title="TRANSFORMATION VALUE">
                  <lightning-input
                  type=" text" 
                  disabled="true"
                  required="true"
                  variant="label-hidden"
                  name="Transformation_Value__c"
                  value={filterData.Transformation_Value__c}
                  onchange={handleChange}
                  data-index={index}>   
                </lightning-input>
                </div>
              </td>

              <td data-label=" " scope="row">
                <div class="slds-truncate" 
                data-index={index}  
                data-id="0"
                onclick={handleWaffle}> 
                <lightning-dynamic-icon type="waffle" alternative-text="A"></lightning-dynamic-icon>
                </div>
            </td>
            <td class="" scope="col">
                <div class="slds-truncate" style="overflow: initial;" title="TARGET FIELD">
                    <lightning-combobox name="Target_Field__c" 
                    options={targetval}
                    onchange={handleChange}
                    required="true"
                    variant="label-hidden"
                    value={filterData.Target_Field__c}
                    data-index={index}>
                    
                     </lightning-combobox>
                </div>    
            </td>
        
            <td class="" scope="col">
                <div class="slds-truncate" title="MANDATORY">
                    <lightning-input type="checkbox"
                                     name="Mandatory__c"
                                     value={filterData.Mandatory__c}
                                     checked={filterData.Mandatory__c}
                                     onchange={handleChange}
                                     data-index={index}
                                     class="slds-size_1-of-2 slds-p-horizontal_x-small">
                    </lightning-input>            
                </div>  
            </td>
            <td class="" scope="col">
                <div class="slds-truncate" title="DELETE">
                    <lightning-button-icon  
                    icon-name="action:delete"
                   
                    data-index={index} 
                    onclick={handleRemoveRow}>
                </lightning-button-icon>
                </div>
                      </td>       
            </tr>
            
        </template>
          </tbody>
         
                </table>
                    <lightning-button label="Add Row" title="Add Row" onclick={handleAddRow}></lightning-button>
                    <template if:true={needHide}>
                <div class="slds-align_absolute-center slds-p-top_small">
                <lightning-button label="Cancel" title="Cancel action" onclick={tableCancel}></lightning-button> 
                <lightning-button label="Save" variant="brand" title="Save action" onclick={saveRows}></lightning-button> 
    </div>
    </template>
            </div>
        </div>
            
        </lightning-card>
        <template if:true={isModalOpen}>
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
                <div class="slds-modal__container">
                    <!-- Modal/Popup Box Header-->
                    <header class="slds-modal__header">
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Transformation</h2>
                        <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={handleCancel}>
                            <lightning-icon icon-name="utility:close"
                                alternative-text="close"
                                variant="inverse"
                                size="small" ></lightning-icon>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </header>
                    <div class="slds-modal__content slds-p-around_medium slds-wrap" id="modal-content-id-1" >
                        <template if:true={getSalesforce}>
                            <lightning-input type= "text" 
                            name="Default" 
                            label="DEFAULT VALUE" 
                            value ={defaultValue} 
                            onchange={handleDefaultVal}
                            data-index={index}
                            class="slds-align_absolute-center" 
                            maxlength="50"></lightning-input>
                        </template>
                        <template if:false={getSalesforce}>
                        <lightning-combobox name="Direct"
                            label="Field Name" value ={directValue} 
                            options={sourceval}
                            data-index={index}
                            onchange={handleDirectVal}
                            class="slds-align_absolute-center">
                            </lightning-combobox>
                        </template>
                         </div>
                         
                         <footer class="slds-modal__footer" >
                            <lightning-button variant="neutral" label="Cancel" title="Cancel" onclick={handleCancel}></lightning-button>
                            <lightning-button variant="brand" label="Save" title="Save" onclick={handleSave}></lightning-button>
                        </footer>
                    
                  </div>
                  </section> 
                  </template>
</template>
==============================Java Script
import {LightningElement, track, wire, api } from 'lwc';
import getTargetfields from '@salesforce/apex/SFmappingrules.getTargetfields'
import getSourcefields from '@salesforce/apex/SFmappingrules.getSourcefields'
import saveRules from '@salesforce/apex/SFmappingrules.saveRules'
import getObjectName from '@salesforce/apex/SFmappingrules.getObjectName'
import deleteAccount from '@salesforce/apex/SFmappingrules.deleteAccount'
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import {NavigationMixin} from 'lightning/navigation';
export default class SFmappingRules extends NavigationMixin(LightningElement) {

    @api recordId;
    @track records;
    @track isModalOpen = false;
    error;
   
    @track indexsrno=0;
    @track tType;
    @track filterList = [];
    @track data=[];
    @api objectApiName;
    @track getSalesforce;
    @track needHide=false;
    @track recId;
    @track windex;
    @track value;
    @track defaultvalue=[];
    @track allList;
    @track tvalue;
    @track count;
   

    connectedCallback() {
        let objRow = {
            Transformation_type__c: '',
            Transformation_Value__c: '',
            Target_Field__c: '',
            Mandatory__c: false,
            Contractrule__c:this.recordId,
            index:this.indexsrno
            //id: ++this.keyIndex
        }
        this.filterList = [...this.filterList, objRow];
        console.log('filterList',this.filterList);
        console.log('filterList',JSON.stringify(this.filterList));
        
    getTargetfields()
    .then(result => {
        console.log('verify',result);
      this.targetval = result;
    })
    .catch(error => {
      // Handle error
    });
    }
    
    
    handleAddRow() {
        this.needHide=true;
        this.indexsrno = this.filterList.length + 1;
        let objRow = {
            Transformation_type__c: '',
            Transformation_Value__c: '',
            Target_Field__c: '',
            Mandatory__c: false,
            Contractrule__c:this.recordId,
            index:this.indexsrno
            
            //id: ++this.keyIndex
        }
        this.filterList = [...this.filterList, objRow];
        console.log('filterList',this.filterList);
        console.log('filterList',JSON.stringify(this.filterList));
    }
    
        handleRemoveRow(event) {
            
           
            this.Finaldelete(event)
            var rowremove = this.filterList;
            console.log('rowremove', rowremove);
            var selectedItem = event.currentTarget;
            console.log('selectedItem', selectedItem);
            var index = selectedItem.dataset.index;
            console.log('index', index);
            rowremove.splice(index, 1);
            
            // Update the index values for the remaining rows
            for (let i = index; i < rowremove.length; i++) {
                rowremove[i].index = i + 1;
            }
        
            this.filterList = rowremove;
            
        }
        
   
    get pick() {
        return [
            
            { label: 'None', value: '' },
            { label: 'Default', value: 'Default' },
            { label: 'Direct', value: 'Direct' },
            { label: 'If-Else', value: 'If-Else'},
            { label: 'Object Reference', value: 'Object Reference'},
            { label: 'Text Split', value: 'Text Split' },
            { label: 'Text Area Split', value: 'Text Area Split' },
        ];

    }

    handleChange(event) {
        if (event.target.name == 'Transformation_Value__c') {
            this.filterList[event.currentTarget.dataset.index].Transformation_Value__c = event.target.value;
            this.tvalue = event.target.value;
            this.needHide = true;
        }
        if (event.target.name == 'Target_Field__c') {
            this.filterList[event.currentTarget.dataset.index].Target_Field__c = event.target.value;
            this.needHide = true;
        }
        if (event.target.name === 'Mandatory__c') {
            const indexx = event.currentTarget.dataset.index;
            const checkedd = event.target.checked;
            this.filterList[indexx].Mandatory__c = checkedd;
            this.needHide = true;
            console.log('dssdf', checkedd);
        }
    }
    
   
    saveRows() {
        
        const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
            .reduce((validSoFar, inputField) => {
                inputField.reportValidity();
                return validSoFar && inputField.checkValidity();
               
            }, true);
            const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
            .reduce((validSoFar, input_Field_Reference) => {
                input_Field_Reference.reportValidity();
                return validSoFar && input_Field_Reference.checkValidity();
            },
             true);            
            if (isInputsCorrect && All_Compobox_Valid) {
        
        console.log('this.filterList => ', JSON.stringify(this.filterList));
        this.isSpinner = true;
        if (this.filterList.length === 0) {
            // No records to save, hide the buttons
            this.needHide=false;
            return;
        }
        saveRules({ allList: this.filterList, recordId:this.recordId }).then(result => {
            console.log('resss',result);
            this.resultId=result.id;
            
            this.isSpinner = false;
            this.showToastMessage('success', 'Accounts Saved Successfully!!', 'Success');
            this.needHide=false;
            this.filterList=[result];
        this.count=this.filterList.length;
        console.log('count',this.count);
            let tempresult=result;

        this.filterList = tempresult.map((result, index) => {

            return { ...result, index: index + 1, checked: result.Mandatory__c };

        });
        this.needHide=false;
      this.indexsrno = 1;
            console.log('result ==> ', result);
        }).catch(error => {
            this.processErrorMessage(error);
            this.isSpinner = false;
        })
        
    }}
    /*processErrorMessage(message) {
        let errorMsg = '';
        if (message) {
            if (message.body) {
                if (Array.isArray(message.body)) {
                    errorMsg = message.body.map(e => e.message).join(', ');
                } else if (typeof message.body.message === 'string') {
                    errorMsg = message.body.message;
                }
            }
            else {
                errorMsg = message;
            }
        }
        this.showToastMessage('error', errorMsg, 'Error!');
    }*/
    
    showToastMessage(variant, message, title) {
        this.dispatchEvent(
            new ShowToastEvent({
                title: title,
                message: message,
                variant: variant
            })
        );
    }
    
    
        handleWaffle(event) {
            this.isModalOpen = true;
            this.defaultvalue = "";
            this.directvalue = "";
            var index = event.currentTarget.dataset.index;
            this.index = index;
            var transformationType = this.filterList[index].Transformation_type__c;
            if (transformationType === 'Direct') {
                this.getSalesforce=false;
                this.directValue = this.filterList[index].Transformation_Value__c;
                
                
              } else if (transformationType === 'Default') {
                this.getSalesforce=true;
                this.defaultValue = this.filterList[index].Transformation_Value__c;
                
              }
        }
       handleSave(){
       
        this.isModalOpen = false;
        
        console.log('suren',(this.filterList));
        console.log('sur',this.value);
      
       let Tranval=this.filterList;
       var index = this.index;
       console.log('ittindex',index);
       let defaval=this.defaultvalue;
       console.log('dval',defaval);
       let direval=this.directvalue;
      
      
       
      console.log('Tranval111',JSON.stringify(Tranval));
      
        if(this.value == 'Default'){
         Tranval[index].Transformation_Value__c = defaval;
         this.getSalesforce=true;
       
       
        }
        else if(this.value == 'Direct'){
            this.getSalesforce=false;
         Tranval[index].Transformation_Value__c = direval;
        
         }
        
         }
        
     
    
     
       
   handleCancel() {  
        
        this.isModalOpen = false;
    } 

    handleDefaultVal(event){
        var index=event.target.dataset.index;
        this.index=index;
        var dval=event.detail.value;
        this.defaultvalue=dval;
        console.log('def',this.defaultvalue);
      }
      handleDirectVal(event){
        var index=event.target.dataset.index;
        this.index=index;
        var dirVal=event.detail.value;
        this.directvalue=dirVal;
        console.log('def',this.directvalue);
      }

    showContainerData(event){
        if (event.target.name == 'Transformation_type__c') {
             this.filterList[event.currentTarget.dataset.index].Transformation_type__c = event.target.value;
             
         }
         this.value = event.detail.value;
         if(event.target.name == 'Transformation_type__c'){
            this.Mapping_rules__c=this.Transformation_type__c;  
          }
         
         if (this.value =='Default'){
         this.getSalesforce = true;

     }
     else
     {
         this.getSalesforce = false;
       }
    }
    
        @wire(getTargetfields,{recId:'$recordId'})
        objfld({data,error})
        {
             console.log('dddd',data);
            if (data) 
            { 
                console.log('TargetData',data);
                var tlist =[];
                for(var i=0; i<data.length; i++)
            {
    
                tlist.push({"label" :data[i].Name,"value" :data[i].Name});
            }
                
                
                this.targetval=tlist;
                console.log('targetval',this.targetval);
        }
            else if (error) 
            {
                console.log('error ', error);
                this.error = error; 
            }
        }

        @wire(getSourcefields,{recId:'$recordId'})
        objsrc({data,error})
        {
             console.log('ssdd',data);
            if (data) 
            { 
                console.log('Sourcedata',data);
                var slist =[];
                for(var i=0; i<data.length; i++)
            {
    
                slist.push({"label" :data[i].Name,"value" :data[i].Name});
            }
                
                
                this.sourceval=slist;
                console.log('sourceval',this.sourceval);
        }
            else if (error) 
            {
                console.log('error ', error);
                this.error = error; 
            }
        }
        @wire(getObjectName, { recId: '$recordId' })
obname({ data, error }) {
    if (data) {
        console.log('daaaata', data);
        this.filterList = data;

        this.filterList.forEach((record) => {
            // Assign the saved value to the corresponding target field option
            const targetFieldOption = this.targetval.find((option) => option.value === record.Target_Field__c);
            if (targetFieldOption) {
                record.Target_Field__c = targetFieldOption.value;
            }
        });

        this.count = this.filterList.length;
        console.log('count', this.count);

        let tempresult = data;
        this.filterList = tempresult.map((data, index) => {
            return { ...data, index: index + 1 };
        });
    } else if (error) {
        console.log('error ', error);
        this.error = error;
    }
}

        
    
        Finaldelete(event) {
           
           
            const index = event.currentTarget.dataset.index;
            const deletedRecordId = this.filterList[index].Id;
        
            deleteAccount({ deletedrecordId: deletedRecordId, recordId: this.recordId })
                .then(result => {
                    this.filterList.splice(index, 1);
                    for (let i = index; i < this.filterList.length; i++) {
                this.filterList[i].index = i + 1;
            }
                    this.count = this.filterList.length;
                    this.isSpinner = false;
                    this.showToastMessage('success', 'Mapping Rule deleted successfully', 'success');
                })
              
        }
        
          
        tableCancel()
        { 
            this.needHide=false;
                /*{
                    this[NavigationMixin.Navigate]({
                        type: 'standard__objectPage',
                        attributes: {
                            objectApiName: 'Mapping_Contract__c',
                            actionName: 'home'
                        },
                    });
                }*/ 
            } 
              }

    
=======================================Apex
public with sharing class SFmappingrules {
    @AuraEnabled(cacheable=true)
    public static List<Objectfield__c> getSourcefields(Id recId)
       {
         Contractrule__c rec =  [SELECT Id, Source_Object__c FROM Contractrule__c WHERE Id=:recId limit 1];
           Objects__c obj =[SELECT Id, Name FROM Objects__c WHERE Name =: rec.Source_Object__c limit 1];
           List<Objectfield__c> objsrc =[SELECT Id, Name FROM Objectfield__c WHERE Objects__c =: obj.Id];
           //insert rec;
           return objsrc;
       }

       //Full Save//
    @AuraEnabled
    public static List<Mapping_rules__c> saveRules(List<Mapping_rules__c> allList, Id recordId)  {
             
        system.debug('all'+allList[0].Name);
        /*Mapping_rules__c objfield =new Mapping_rules__c();
        objfield.Transformation__c= allList[0].Transformation__c;
        objfield.Transformation__c= allList[0].Transformation__c;
        objfield.Target__c=allList[0].Target__c;
        objfield.Mandatory__c= allList[0].Mandatory__c;*/
       // objfield.Mapping__c=recId;
        system.debug('accList'+allList);
       upsert allList;        
       return [SELECT Id, Transformation_type__c, Transformation_Value__c, Target_Field__c, Mandatory__c FROM Mapping_rules__c WHERE Contractrule__c=: recordId];
    }
    
    @AuraEnabled(cacheable=true)
    public static List<Mapping_rules__c> getObjectName(Id recId)
       {
         List<Mapping_rules__c> rec =  [SELECT Id, Transformation_type__c, Transformation_Value__c, Target_Field__c, Mandatory__c FROM Mapping_rules__c WHERE Contractrule__c=:recId];
           
           //insert rec;
           return rec;
       }
       @AuraEnabled(cacheable=true)
       public static Objects__c saveObject (Objects__c rec)
        {
            upsert rec;
            return rec;
        }
        @AuraEnabled(cacheable=true)
        public static void saveFieldsList(List<Mapping_rules__c> allList) 
        {        
            Insert allList;
        }
        @AuraEnabled(cacheable=true)
        public static List<Objectfield__c> getTargetfields(Id recId)
           {
             Contractrule__c rec =  [SELECT Id, Target_Object__c FROM Contractrule__c WHERE Id=:recId limit 1];
               Objects__c obj =[SELECT Id, Name FROM Objects__c WHERE Name =: rec.Target_Object__c limit 1];
               List<Objectfield__c> objfld =[SELECT Id, Name FROM Objectfield__c WHERE Objects__c =: obj.Id];
               //insert rec;
               system.debug(objfld);
               return objfld;
           }
 
    /*@AuraEnabled
    public static List<Mapping_rules__c> deleteAccount(Mapping_rules__c deletedrecordId, Id recId)
    {
      delete deletedrecordId;
      return [SELECT Id, Transformation_type__c, Transformation_Value__c, Target_Field__c, Mandatory__c FROM Mapping_rules__c WHERE Contractrule__c=: recordId];        
    }*/

    /*@AuraEnabled
    public static void deleteAccount(String delrec){
      Mapping_rules__c delfinal = [SELECT Id, Transformation_type__c, Transformation_Value__c, Target_Field__c, Mandatory__c FROM Mapping_rules__c where Id=: delrec LIMIT 1];
        delete delfinal;
    }*/
    @AuraEnabled
    
        public static List <Mapping_rules__c> deleteAccount(Id deletedrecordId,Id recordId){
          Mapping_rules__c rec=[SELECT Id, Name, Transformation_type__c, Transformation_Value__c, Target_Field__c, Mandatory__c, Contractrule__c FROM Mapping_rules__c WHERE id=:deletedrecordId];
            delete rec;
            List <Mapping_rules__c> delrec=[SELECT Id, Name, Transformation_type__c, Transformation_Value__c, Target_Field__c, Mandatory__c, Contractrule__c FROM Mapping_rules__c WHERE Contractrule__c=:recordId];
            System.debug('delrec'+delrec);
            return delrec;
       
    }
}
  
    

    
        
    


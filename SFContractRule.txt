<template>
    <lightning-card >
       
            
            <div class="slds-grid slds-p-around_medium slds slds-card_boundary">
                <div class="slds-col slds-grow">
                    <header class="slds-page-header slds-p-bottom_medium">
            <b class="slds-text-heading_small">Contract Rule({count})</b>
            <lightning-button label="New" onclick ={openModal} class="slds-float_right"></lightning-button>
        </header>
        </div>
    
</div>
       
        <div style="height: 500px">
        <lightning-datatable  
                key-field="Id"
                data={data}
                columns={columns}
                hide-checkbox-column="true"
             
               onrowaction={handleRowAction}></lightning-datatable>
 </div>
        
    </lightning-card>
        <template if:true={isModalOpen}>  
        <!-- Modal/Popup Box starts here--> 
        <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <!-- Modal/Popup Box Header-->
                <header class="slds-modal__header">
                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                        <lightning-icon icon-name="utility:close"
                            alternative-text="close"
                            variant="bare-inverse"
                            size="small" ></lightning-icon>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">New Contract Rule</h2>
                </header>
                
    <!--Modal/Popup Box Body-->
                
        <div class="slds-modal__content slds-p-around_medium slds-grid slds-wrap" id="modal-content-id-1">
           
            <lightning-input label= "Contract Rule Name" 
            onchange={contactChangeVal} 
            data-index={index}
            value={Crname}
            required="true" 
            class="slds-size_1-of-2 slds-p-horizontal_x-small">
            </lightning-input>       
        
            <lightning-input type="number" 
            value={ruleorder} 
            onchange={contactChangeVal} 
            label= "Rule Order" 
            disabled="true"
            name="Rule_Order__c" 
            data-index={index}
            class="slds-size_1-of-2 slds-p-horizontal_x-small">
            </lightning-input>       
                                
    <lightning-combobox name="Source_Object__c" 
    onchange={contactChangeVal} 
    options={sourceval} 
    value ={sourceobject}  
    required="true"  
    label="Source Object" 
    class="slds-size_1-of-2 slds-p-horizontal_x-small">
    </lightning-combobox>

    <lightning-combobox name="Target_Object__c"
    type="picklist" 
    onchange={contactChangeVal} 
    required="true" 
    options={targetval} value ={targetobject} 
    label="Target Object" class="slds-size_1-of-2 slds-p-horizontal_x-small">
    </lightning-combobox>

    <lightning-combobox name="Source_Record_Type__c"
    type="picklist" 
    onchange={contactChangeVal} 
    label= "Source Record Type" 
    value={recordtype}
    options={rectypeOptions}
    class="slds-size_1-of-2 slds-p-horizontal_x-small">
    </lightning-combobox>

    <lightning-combobox name="External_Id__c" 
    onchange={contactChangeVal} 
    label= "External Id" 
    value={externalid}
    required="true" 
    class="slds-size_1-of-2 slds-p-horizontal_x-small" 
    options={external}>       
    </lightning-combobox>
                </div>
                
                <footer class="slds-modal__footer">
                    
                    <lightning-button label="Cancel" title="Cancel action" onclick={closeModal}></lightning-button>  
                    <lightning-button variant="brand" label="Save" title="Save action" onclick={insertContactAction}></lightning-button>
                    
                </footer>
                
            </div>
        </section>
            <div class="slds-backdrop slds-backdrop_open"></div>
        </lightning-record-edit-form>
            </template>
</template>
===================================Java Script
import {LightningElement,api,track,wire } from 'lwc';
import SourcePicklist from '@salesforce/apex/SFcontractrule.SourcePicklist';
import TargetPicklist from '@salesforce/apex/SFcontractrule.TargetPicklist';
import getSourceField from '@salesforce/apex/SFcontractrule.getSourceField';
import fieldRec from '@salesforce/apex/SFcontractrule.fieldRec';
import saveMapping from '@salesforce/apex/SFcontractrule.saveMapping'
import { getRecord } from 'lightning/uiRecordApi';
import { createRecord } from 'lightning/uiRecordApi';
import Crname from '@salesforce/schema/Contractrule__c.Name';
import ruleorder from '@salesforce/schema/Contractrule__c.Rule_Order__c';
import sourceobject from '@salesforce/schema/Contractrule__c.Source_Object__c';
import targetobject from '@salesforce/schema/Contractrule__c.Target_Object__c';
import objSourceRec from '@salesforce/schema/Contractrule__c.Source_Record_Type__c';
import externalid from '@salesforce/schema/Contractrule__c.External_Id__c';
import MappingID from '@salesforce/schema/Contractrule__c.Mapping_Contract__c';
import objMainObject from '@salesforce/schema/Contractrule__c';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import {NavigationMixin} from 'lightning/navigation';
import {refreshApex} from '@salesforce/apex';
import deleteAccount from '@salesforce/apex/SFcontractrule.deleteAccount';
import { subscribe, unsubscribe, onError } from 'lightning/empApi';
import { updateRecord } from 'lightning/uiRecordApi';
import Name from '@salesforce/schema/Account.Name';


const actions = [
   
    { label: 'Delete', name: 'delete' },
];
const columns = [{label: 'Contract Rule Name',fieldName: 'accLink',type: 'url',sortable: true,
typeAttributes: { label: { fieldName: "Name"}}},
    
{label: 'Rule Order',fieldName: 'Rule_Order__c',sortable: true},
{label: 'Source Object',fieldName: 'Source_Object__c',sortable: true},
{label: 'Target Object',fieldName: 'Target_Object__c',sortable: true},
{label: 'Record Type',fieldName: 'Source_Record_Type__c',sortable: true},
{type: 'action', typeAttributes: { rowActions: actions}}];

export default class SFcontractruleNew extends NavigationMixin(LightningElement) {
    
    @api recordId;
    @api objectApiName;
    draftValues = [];
    @track isModalOpen = false;
    @track sourceval=[];
    @track targetval;
    @track filterList = [];
    @track Rowsave
    @track keyIndex = 0;
    @track data;
    @track objjName='';
    @track objRuleorder='';
    
    @track objSourceobject='';
    @track objTargetobject='';
    @track objSourceRec='';
    @track objExternal='';
    @track errorMsg;
    @track error;
    @track contactId;
   @track sourcearray;
   @track columns = columns;
   @track actions;
   @track count;
   refreshTableResult;

@track objName;
@track extid;



   
    openModal() 
    {
        this.Crname='';
        this.ruleorder='';
        this.sourceobject='';
        this.targetobject='';
        this.recordtype='';
        this.externalid='';

        this.isModalOpen = true;
        
        //data=this.data
        //this.ContractRule.Rule_order__c=data.length+1;
        this.ruleorder=(this.data).length+1;
     
    }

    closeModal() {  
        this.isModalOpen = false;
        this.Crname='';
this.ruleorder='';
this.sourceobject='';
this.targetobject='';
this.recordtype='';
this.externalid='';
    } 

    get externalidoptions() {
        return [
            { label: 'None', value: '' },
            { label: 'AccountNumber', value: 'AccountNumber' },
            { label: 'BillingCity', value: 'BillingCity' },
            { label: 'BillingStreet ', value: 'BillingStreet' },
            { label: 'Description', value: 'Description' },
            { label: 'ParenId', value: 'ParenId' },
            { label: 'SF_Connector_SAP_ID__c', value: 'SF_Connector_SAP_ID__c' },
            { label: 'Type', value: 'Type' },
            { label: 'Website', value: 'Website' },
        ];
    }
    get rectypeOptions() {
        return [
            { label: 'None', value: '' },
            
        ];
    }

    connectedCallback(){
        this.refreshData();
        console.log(this.recordId + ' from connectedCallback==>')
        this.columns = [
            {label: 'Contract Rule Name',fieldName: 'accLink',type: 'url',sortable: true,
typeAttributes: { label: { fieldName: "Name"}}},
    
{label: 'Rule Order',fieldName: 'Rule_Order__c',sortable: true},
{label: 'Source Object',fieldName: 'Source_Object__c',sortable: true},
{label: 'Target Object',fieldName: 'Target_Object__c',sortable: true},
{label: 'Record Type',fieldName: 'Source_Record_Type__c',sortable: true},
{type: 'action', typeAttributes: { rowActions: actions}}
            
        ];
    }


    getContractRule() {
        
        fieldRec({ recordId: '$recordId' })
            .then((data) => {
                if (data) {
                    console.log('count', this.count);
                    data = JSON.parse(JSON.stringify(data));
                    console.log('datas', data);
                    let ruleList = [];
                    for (let i = 0; i < data.length; i++) {
                        let ruledata = Object.assign({}, data[i]);
                        ruledata.accLink = "/" + ruledata.Id;
                        ruleList.push(ruledata);
                    }
                    this.data = ruleList;
                    this.count = this.data.length;
                    this.error = undefined;
                }
            }) 
            .catch((error) => {
                this.showToast('Error', error.message, 'error');
            });
    }

    
    @wire(fieldRec, { recordId: '$recordId' })
    wiredPopupSave({ data, error }) {
        if (data) {
            console.log('count', this.count);
            data = JSON.parse(JSON.stringify(data));
            console.log('datas', data);
            let ruleList = [];
            for (let i = 0; i < data.length; i++) {
                let ruledata = Object.assign({}, data[i]);
                ruledata.accLink = "/" + ruledata.Id;
                ruleList.push(ruledata);
            }
            this.data = ruleList;
            this.count = this.data.length;
            this.error = undefined;
        } else if (error) {
            this.error = error;
        }
    }

    refreshData() {
        return refreshApex(this.wiredPopupSave);
    }
    saveContractRule() {
        // Implement the logic to save the current rule using Apex method 'saveMapping'
        // Pass the current rule object to the method
        // Example:
        saveMapping({ mapp: this.currentRule })
            .then((result) => {
                // Handle the success result
                // Update the data and count variables
                this.data = result;
                this.count = result.length;
                this.isModalOpen = false;
                this.showToast('Success', 'Rule saved successfully', 'success');
            })
            .catch((error) => {
                this.showToast('Error', error.message, 'error');
            });
    }
    
    @wire(SourcePicklist,{recordId:'$recordId'})
    sval({data,error})
    {
         
        if (data) 
        {
            console.log('SourceData',data);
           
            var solist =[];

           for(var i=0; i<data.length; i++)

        {

            solist.push({"label" :data[i].Name,"value" :data[i].Name});
        }
           
            
            this.sourceval=solist;
            //this.sourcePicklistval = target.Source_Object__c;
            console.log('this.sval',this.sourceval);
        } 
        else if (error) 
        {
            console.log('error ', error);
            this.error = error; 
        }
    }

    @wire(TargetPicklist,{recordId:'$recordId'})
    tval({data,error})
    {
         
        if (data) 
        { 

            console.log('TargetData',data);
            var tlist =[];
            for(var i=0; i<data.length; i++)
        {

            tlist.push({"label" :data[i].Name,"value" :data[i].Name});
        }
            
            
            this.targetval=tlist;
    }
        else if (error) 
        {
            console.log('error ', error);
            this.error = error; 
        }
    }

    
    
  
    getExternalidfields(){
       

        getSourceField({
            objName : this.extid
        })
    
        .then(result =>{
            console.log('result',result);
            var Objectsfileds=[];
            for(var key in result)
            {  
             Objectsfileds.push({"label" :result[key],"value" :result[key]});
             }
             this.external=Objectsfileds; 
    
    })      
    
    .catch(error=>{
    
    this.error = error;})
    
    }

handleEvent = event => {
    const refreshRecordEvent = event.data.payload;
    if (refreshRecordEvent.RecordId__c === this.recordId) {
        this.recordId='';
        return refreshApex(this.refreshTable);
    }
}

handleRowAction(event) {
    const actionName = event.detail.action.name;
    const row = event.detail.row;
    this.recordId = row.Id;
    switch (actionName) {
        case 'edit':
                this[NavigationMixin.Navigate]({
                    type: 'standard__recordPage',
                    attributes: {
                        recordId: row.Id,
                        objectApiName: 'Contractrule__c',
                        actionName: 'edit'
                    }
                });
                break;
                case 'delete':
                    this.delAccount(row);
                    break;
    
        }
    }

    editRule(row) {
        // Open the modal for editing the selected rule
        
        this.currentRule = {
            Name: row.Name,
            Rule_Order__c: row.Rule_Order__c,
            Source_Object__c: row.Source_Object__c,
            Target_Object__c: row.Target_Object__c,
            Source_Record_Type__c: row.Source_Record_Type__c,
            External_Id__c: row.External_Id__c
        };
        this.index = this.data.indexOf(row);
        this.isModalOpen = true;
    }
    
    deleteRule(row) {
        console.log('row.Id', row.Id);
        console.log('row.Mapping_Contract__c', row.Mapping_Contract__c); // Check the Mapping_Contract__c field

        const recordId = row.Mapping_Contract__c;
        
        deleteAccount({ selectedItem: row })
            .then(() => {
                // Remove the deleted record from the data array
                this.data = this.data.filter(item => item.Id !== row.Id);
                
                // Update the count variable
                this.count = this.data.length;
                
                this.showToast('Success', 'Rule deleted successfully', 'success');
            })
            .catch((error) => {
                this.showToast('Error', error.message, 'error');
            });
    }
    
    
    
    
    handleRowAction(event) {
        const action = event.detail.action;
        const row = event.detail.row;
    
        if (action.name === 'edit') {
            // Open the modal for editing the rule
            this.editRule(row);
        } else if (action.name === 'delete') {
            // Delete the rule
            this.deleteRule(row);
        }
    }


Crname='';
ruleorder='';
sourceobject='';
targetobject='';
recordtype='';
externalid='';

contactChangeVal(event) {
    console.log('ssss',event.target.label);
    console.log('ssss',event.target.value);        
  
    if(event.target.label=='Contract Rule Name'){
        this.Crname = event.target.value;
    }            
    if(event.target.label=='Rule Order'){
        this.ruleorder = event.target.value;
    }
    if(event.target.label=='Source Object'){
        this.sourceobject = event.target.value;
        this.extid= event.target.value;
        this.getExternalidfields();

    }
    if(event.target.label=='Target Object'){
        this.targetobject = event.target.value;
    }
    if(event.target.label=='Source Record Type'){
        this.recordtype = event.target.value;
    }
    if(event.target.label=='External Id'){
        this.externalid = event.target.value;
        
    }     

}
insertContactAction(){
    
    this.isModalOpen = false;

        const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
                    .reduce((validSoFar, inputField) => {
                        inputField.reportValidity();
                        return validSoFar && inputField.checkValidity();
                    }, true);
        const All_Compobox_Valid = [...this.template.querySelectorAll('lightning-combobox')]
                    .reduce((validSoFar, input_Field_Reference) => {
                        input_Field_Reference.reportValidity();
                        return validSoFar && input_Field_Reference.checkValidity();
                    }, true);            
         if (isInputsCorrect && All_Compobox_Valid) {  
    console.log('saveaccount',this.recordId);
    const fields = {};
    fields[Crname.fieldApiName] = this.Crname;
    fields[ruleorder.fieldApiName] = this.ruleorder;
    fields[sourceobject.fieldApiName] = this.sourceobject;
    fields[targetobject.fieldApiName] = this.targetobject;
    //fields[objSourceRec.fieldApiName] = this.recordtype;
    fields[externalid.fieldApiName] = this.externalid;
    fields[MappingID.fieldApiName] = this.recordId;
    //fields[objActive.fieldApiName] = this.value;
   
    console.log('fields',JSON.stringify(fields));
    const recordInput = { apiName: objMainObject.objectApiName, fields };
    console.log('recordInput',recordInput);
    createRecord(recordInput)
        .then(contactobj=> {
            console.log('contactobjcheck',contactobj.fields);
            this.contactId = contactobj.id;
            
            console.log('contactId',this.contactId);
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Record has been created',
                    variant: 'success',
                }),
                
            );
            
            let ruleList = [...this.data]; // Create a copy of the existing data array

    let ruledata = {}; // Initialize an empty object
    ruledata.Name = contactobj.fields.Name.value;
    ruledata.Rule_Order__c = contactobj.fields.Rule_Order__c.value;
    ruledata.Source_Object__c = contactobj.fields.Source_Object__c.value;
    ruledata.Target_Object__c = contactobj.fields.Target_Object__c.value;
    ruledata.External_Id__c = contactobj.fields.External_Id__c.value;
    ruledata.Mapping_Contract__c = contactobj.fields.Mapping_Contract__c.value;
    ruledata.accLink = "/" + contactobj.id;
    console.log('ruledata', ruledata);
    ruleList.push(ruledata);

    this.data = ruleList;
    console.log('this.data', this.data);

    this.count = this.data.length;

    this.refreshData();
    console.log('count', this.count);
            
            /*this[NavigationMixin.Navigate]({
                type: 'standard__recordPage',
                attributes: {
                    recordId: contactobj.id,
                    objectApiName: 'Contractrule__c',
                    actionName: 'view'
                },
            });*/

        })
        .catch((error)=> {
            console.log('error', error.body.message);
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error creating record',
                    message: error.body.message,
                    variant: 'error',
                }),
            );
        });
}
updateRecordView() 
{
    setTimeout(function()
{ window.location.reload(); }, 100);
 }
}
}
=====================================EDIT
<template>
    <!--Use template if:true to display/hide popup based on isModalOpen value--> 
    <template if:true={isModalOpen}>
        <lightning-record-edit-form
             record-id={recordId} 
                object-api-name="Contractrule__c"
                onsubmit={handleSubmit}
                onsuccess={handleSuccess}>
                <lightning-messages>
    </lightning-messages>
       
        <!-- Modal/Popup Box LWC starts here -->
        <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <!-- Modal/Popup Box LWC header here -->
                <header class="slds-modal__header">
                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" onclick={closeModal}>
                        <lightning-icon name="utility:close"
                            alternative-text="close"
                            variant="inverse"
                            size="large" ></lightning-icon>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Edit Contract Rule</h2>
                 </header>    
                 <h3 class="slds-section__title">
                        
                    <div class="slds-section__title-action">
                      <span class="slds-truncate" title="Section Title">Contract Rule Information</span>
                    </div>
                  </h3> 

                  <div class="slds-modal__content slds-p-around_medium slds-grid slds-wrap" id="modal-content-id-1">

                    <lightning-input label= "Contract Rule Name" 
                    onchange={contactChangeVal} 
                    field-name="Name" 
                    data-name={Crname}
                    value={Crname}
                    required="true" 
                    class="slds-size_1-of-2 slds-p-horizontal_x-small">
                    </lightning-input>     
                
                             <lightning-input type="number" 
                            value={ruleorder} 
                            onchange={contactChangeVal} 
                            label= "Rule Order" 
                            disabled="true"
                            field-name="Rule_Order__c" 
                          
                            class="slds-size_1-of-2 slds-p-horizontal_x-small">
                            </lightning-input> 
                            <lightning-combobox
                            
                            field-name="Source_Object__c"
                            onchange={contactChangeVal}
                            value={sourceobject}
                            required="true"
                            label="Source Object"
                            options={sourceOptions}
                            class="slds-size_1-of-2 slds-p-horizontal_x-small"
                        >
                        </lightning-combobox>
                
                        <lightning-combobox 
                        field-name="Target_Object__c"
                      
                        onchange={contactChangeVal}
                        required="true"
                        options={targetOptions}
                        value={targetobject}
                        label="Target Object"
                        class="slds-size_1-of-2 slds-p-horizontal_x-small"
                    >
                    </lightning-combobox>
                             <!--template for:each={allObjectList} for:item="ObjectList">
                                <li key={ObjectList.value}>{ObjectList.value}</li>
                              </template-->
                              <lightning-combobox 
                              field-name="Source_Record_Type__c"
                              type="picklist" 
                              onchange={contactChangeVal} 
                              label= "Source Record Type" 
                              value={recordtype}
                              options={rectypeOptions}
                              class="slds-size_1-of-2 slds-p-horizontal_x-small">
                              </lightning-combobox>
                              <lightning-combobox
                               field-name="External_Id__c" 
                               type="picklist" 
                              onchange={contactChangeVal} 
                              label= "External Id" 
                              value={externalid}
                              required="true" 
                              class="slds-size_1-of-2 slds-p-horizontal_x-small" 
                              options={external}>       
                              </lightning-combobox>
                            
                
                        </div>
                    
                            <!-- Modal/Popup Box LWC footer starts here -->
                            <footer class="slds-modal__footer">
                                    
                                <lightning-button label="Cancel" title="Cancel action" onclick={closeModal}></lightning-button>  
                                <lightning-button variant="brand" label="Save" title="Save action" onclick={insertContactAction}></lightning-button>
                                
                            </footer>
                            
                        
                   
                
                        </div>
                    </section>
                    <div class="slds-backdrop slds-backdrop_open"></div>
                    </lightning-record-edit-form>
                </template>
                <div style="height: 500px">
                    <lightning-datatable  
                            key-field="Id"
                            data={data}
                            columns={columns}
                            hide-checkbox-column="true"
                           ></lightning-datatable>
             </div>

</template>
===============================Java script
import {LightningElement,api,track,wire } from 'lwc';
import getSrcTarval from '@salesforce/apex/SFcontractrule.getSrcTarval';
import SourcePicklist from '@salesforce/apex/SFcontractrule.SourcePicklist';
import TargetPicklist from '@salesforce/apex/SFcontractrule.TargetPicklist';
import getSourceField from '@salesforce/apex/SFcontractrule.getSourceField';
import fieldRec from '@salesforce/apex/SFcontractrule.fieldRec';
import saveMapping from '@salesforce/apex/SFcontractrule.saveMapping'
import Conname from '@salesforce/schema/Contractrule__c.Name';
import Conruleorder from '@salesforce/schema/Contractrule__c.Rule_Order__c';
import Consourceobject from '@salesforce/schema/Contractrule__c.Source_Object__c';
import Contargetobject from '@salesforce/schema/Contractrule__c.Target_Object__c';
import Conexternalid from '@salesforce/schema/Contractrule__c.External_Id__c';
import Conrecordtype from '@salesforce/schema/Contractrule__c.Source_Record_Type__c';
import ContractID from '@salesforce/schema/Contractrule__c.Id';
import objMainObject from '@salesforce/schema/Contractrule__c';
import { createRecord } from 'lightning/uiRecordApi';
import {ShowToastEvent} from 'lightning/platformShowToastEvent';
import {NavigationMixin} from 'lightning/navigation';
import {refreshApex} from '@salesforce/apex';
import Id from '@salesforce/schema/AcceptedEventRelation.Id';
import deleteAccount from '@salesforce/apex/SFcontractrule.deleteAccount';

import { updateRecord } from 'lightning/uiRecordApi';
import { getRecord, getFieldValue } from 'lightning/uiRecordApi';


export default class SFcontractruleNew extends NavigationMixin(LightningElement) {
    
    @api recordId;
    @api objectApiName;
    @track isModalOpen = true;
    // @track sourceval = [];
    // @track targetval = [];
     @track Rowsave
     @track keyIndex = 0;
     @track data;
     @track errorMsg;
     @track recordName;
 
     @track contactId;
    @track sourcearray;
    
    @track refreshTable;
    @track count;
    refreshTableResult;
    //@track targetval;
    @track filterList = [];
    @track Consourceobject = '';
    @track Contargetobject = '';
    @track Conrecordtype = '';
    @track Conexternalid = '';
    @track errorMsg;
    @track error;
    @track contactId;
    @track sourcearray;
    @track actions;
    @track count;
    @track objName;
    @track extid;
    
    Crname = '';
    ruleorder = '';
    sourceobject = '';
    targetobject = '';
    recordtype = '';
    //externalid = '';
 
    sourceobject;
    targetobject;
    @track sourceOptions = [];
@track targetOptions = [];
@track externalid;
@api externalid;

  
    connectedCallback() {
        
      
        
        console.log(this.recordId + ' from connectedCallback==>');
        
       
    }
    openModal() {
        const inputField = this.template.querySelector('lightning-input[data-name]');
        this.recordName = inputField ? inputField.dataset.name : '';
        this.isModalOpen = true;
    }
    

    @wire(getRecord, {
        recordId: '$recordId',
        fields: [
            Conname,
            Conruleorder,
            Consourceobject,
            Contargetobject,
            Conrecordtype,
            Conexternalid
        ]
    })
    wiredRecordData({ error, data }) {
        if (data) {
            console.log('wire', data);
            this.Crname = getFieldValue(data, Conname);
            this.ruleorder = getFieldValue(data, Conruleorder);
            this.sourceobject = getFieldValue(data, Consourceobject);
            this.targetobject = getFieldValue(data, Contargetobject);
            this.externalid = getFieldValue(data, Conexternalid);
            this.recordtype = getFieldValue(data, Conrecordtype);
            
            console.log('Source Object:', this.sourceobject);
            console.log('Target Object:', this.targetobject);
            console.log('External ID:', this.externalid);
        } else if (error) {
            // Handle error
        }
    }
    
    contactChangeVal(event) {
        console.log(event.target.label);
        console.log(event.target.value);        
      
        if(event.target.label=='Contract Rule Name'){
            this.Crname = event.target.value;
        }            
        if(event.target.label=='Rule Order'){
            this.ruleorder = event.target.value;
        }
        if(event.target.label=='Source Object'){
            this.sourceobject = event.target.value;
        }
        if(event.target.label=='Target Object'){
            this.targetobject = event.target.value;
        }
        if(event.target.label=='Source Record Type'){
            this.recordtype = event.target.value;
        }
        if(event.target.label=='External Id'){
            this.externalid = event.target.value;
        }
        
        
    }
@track externalid;
    @track sourceOptions = [];
    @track targetOptions = [];
    @track external=[];

    @wire(getSrcTarval, { recordId: '$recordId' })
    wiredSrcTarval({ data, error }) {
        if (data) {
            const [srcoption,taroption] = data;

   this.sourceOptions = [              
        ...srcoption.map(obj => ({ label: obj, value: obj }))
    ];
           
    this.targetOptions = [              
        ...taroption.map(obj => ({ label:obj, value: obj }))
    ];
            
        } else if (error) {
            console.log('Error', error);
            // Handle the error
        }
    }

    @wire(getSourceField, { objName: '$sourceobject' })
    wiredExTarval({ data, error }) {
        if (data) {
            

   this.external = [              
        ...data.map((obj) => ({ label: obj, value: obj }))
    ];
           
       
        } else if (error) {
            console.log('Error', error);
            // Handle the error
        }
    }

   
   
   

    handleSubmit(event) {
        event.preventDefault();
        const fields = event.detail.fields;
        this.Crname = fields.Name;
        this.ruleorder = fields.Rule_Order__c;
        this.sourceobject = fields.Source_Object__c;
        this.targetobject = fields.Target_Object__c;
        this.recordtype = fields.Source_Record_Type__c;
        this.externalid = fields.External_Id__c;
        this.insertContactAction();
    }

    closeModal() {  
        
    
    
        this[NavigationMixin.Navigate]({
            type: 'standard__recordPage',
            attributes: {
                recordId: this.recordId,
                objectApiName: 'Contractrule__c',
                actionName: 'view'
            },
        });
    }


       
    /*getExternalidfields(){
       

        getSourceField({
            objName : this.extid
        })
    
        .then(result =>{
            console.log('result',result);
            var Objectsfileds=[];
            for(var key in result)
            {  
             Objectsfileds.push({"label" :result[key],"value" :result[key]});
             }
             this.external=Objectsfileds; 
    
    })     
    
    .catch(error=>{
    
    this.error = error;})
    
    }*/


      // Function to retrieve the source picklist options
/*getSourcePicklistOptions() {
    // Make a server-side call to fetch the source picklist options
    SourcePicklist({ recordId: '$recordId' })
        .then(result => {
            console.log('reswww',result);
            // Assign the retrieved options to the sourceOptions array
            this.sourceOptions = result;
        })
        .catch(error => {
            console.error('Error retrieving source picklist options:', error);
        });
}
// Function to retrieve the target picklist options
getTargetPicklistOptions() {
    console.log('Record Id:', this.recordId);
    // Make a server-side call to fetch the target picklist options
    TargetPicklist({ recordId: '$recordId' })
        .then(result => {
            console.log('resss',result);
            // Assign the retrieved options to the targetOptions array
            this.targetOptions = result;
        })
        .catch(error => {
            console.error('Error retrieving target picklist options:', error);
        });
}*/
    

    handleEvent(event) {
        const refreshRecordEvent = event.data.payload;
        if (refreshRecordEvent && refreshRecordEvent.RecordId__c === this.recordId) {
          this.recordId = '';
          return refreshApex(this.refreshTable);
        }
      }

      @wire(fieldRec, { recordId: '$recordId' })
    wiredPopupSave({ data, error }) {
        if (data) {
            console.log('count', this.count);
            data = JSON.parse(JSON.stringify(data));
            console.log('datas', data);
            let ruleList = [];
            for (let i = 0; i < data.length; i++) {
                let ruledata = Object.assign({}, data[i]);
                ruledata.accLink = "/" + ruledata.Id;
                ruleList.push(ruledata);
            }
            this.data = ruleList;
            this.count = this.data.length;
            this.error = undefined;
        } else if (error) {
            this.error = error;
        }
    }
      
    insertContactAction() {
        const isInputsCorrect = [...this.template.querySelectorAll('lightning-input')]
            .reduce((validSoFar, inputField) => {
                inputField.reportValidity();
                return validSoFar && inputField.checkValidity();
            }, true);
    
        const allComboboxValid = [...this.template.querySelectorAll('lightning-combobox')]
            .reduce((validSoFar, inputField) => {
                inputField.reportValidity();
                return validSoFar && inputField.checkValidity();
            }, true);
    
        if (isInputsCorrect && allComboboxValid) {
            const fields = {};
            fields[ContractID.fieldApiName] = this.recordId;
            fields[Conname.fieldApiName] = this.Crname;
            fields[Conruleorder.fieldApiName] = this.ruleorder;
            fields[Consourceobject.fieldApiName] = this.sourceobject;
            fields[Contargetobject.fieldApiName] = this.targetobject;
            fields[Conexternalid.fieldApiName] = this.externalid;
    
            const recordInput = {fields};
    
            updateRecord(recordInput)
                .then(result => {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Success',
                            message: 'Record has been updated',
                            variant: 'success',
                        })
                    );
    
                    this[NavigationMixin.Navigate]({
                        type: 'standard__recordPage',
                        attributes: {
                            recordId: result.id,
                            objectApiName: 'Contractrule__c',
                            actionName: 'view'
                        },
                    });
    
                    const updatedData = this.data.map(item => {
                        if (item.Id === result.id) {
                            return {
                                ...item,
                                Name: result.fields.Name,
                                Rule_Order__c: result.fields.Rule_Order__c,
                                Source_Object__c: result.fields.Source_Object__c,
                                Target_Object__c: result.fields.Target_Object__c,
                                External_Id__c: result.fields.External_Id__c,
                                Mapping_Contract__c: result.fields.Mapping_Contract__c
                            };
                        }
                        return item;
                    });
    
                    this.data = updatedData;
                    this.refreshData();
                })
                .catch(error => {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Error updating record',
                            message: error.body.message,
                            variant: 'error',
                        })
                    );
                });
        }
        
updateRecordView() 
{
    setTimeout(function()
{ window.location.reload(); }, 100);
 }
}
}
====================================Contract Rule Detail
<template>
    <lightning-card>
      
        <div class="">
        <lightning-record-edit-form record-id={recordId} onsuccess={handleSuccess} object-api-name="Contractrule__c">
                     
            <div class="slds-modal__content slds-p-around_small slds-grid slds-wrap">  
      <div class="slds-modal__content slds-p-around_small slds-size_1-of-2" >
        <template if:true={showEditField}>
        <abbr title="required" class="slds-required">*</abbr>Contract Rule Name
        
                            
            <lightning-input-field field-name= "Name"
            variant="label-hidden">
            </lightning-input-field>
            </template>

           <lightning-layout horizontal-align="spread" >
           <template if:false={showEditField}>
            <lightning-layout-Item>
                <abbr title="required" class="slds-required">*</abbr>Contract Rule Name
    <lightning-output-field field-name ="Name" variant="label-hidden"
    ></lightning-output-field>
   
</lightning-layout-Item>
<lightning-layout-Item>
 <div class='div-block'>
  
     <lightning-button-icon variant="bare"  icon-name="utility:edit" onclick={handleEdit}>
     </lightning-button-icon> 
</div>
</lightning-layout-Item>      
</template>
</lightning-layout>
    <p class="slds-border_bottom"></p> 
    <br/>
    <abbr title="required" class="slds-required">*</abbr>Source Object
    
     <lightning-output-field field-name ="Source_Object__c" variant="label-hidden" 
                        >
                       </lightning-output-field>
                      
                       <p class="slds-border_bottom"></p> 
    <br/>
    
    <label>Source Record Type</label>
                       <template if:true={showEditField}>
                            
                        <lightning-input-field field-name= "Source_Record_Type__c"
                        variant="label-hidden">
                        </lightning-input-field>
                        </template>

                       <lightning-layout horizontal-align="spread" >
                       <template if:false={showEditField}>
                        <lightning-layout-Item>
                          <lightning-output-field field-name= "Source_Record_Type__c"
                          variant="label-hidden">
                         </lightning-output-field>
                         </lightning-layout-Item>
                         <lightning-layout-Item>
                          <div class='div-block'>
                           
                              <lightning-button-icon variant="bare"  icon-name="utility:edit" onclick={handleEdit}>
                              </lightning-button-icon> 
                       </div>
                       </lightning-layout-Item>      
                         </template>
                       </lightning-layout>
                       <p class="slds-border_bottom"></p> 
                    
                    </br>
                    <div>
                       <lightning-output-field field-name ="Mapping_Contract__c">
                    </lightning-output-field> 
                </div>       
    <p class="slds-border_bottom"></p> 
    </div>


    <div class="slds-modal__content slds-p-around_small slds-size_1-of-2" >
        
                       <lightning-output-field field-name ="Rule_Order__c">
                      </lightning-output-field>
                      <p class="slds-border_bottom"></p> 
                   
                    </br>
                       <div>
                      
                          <lightning-output-field field-name= "Target_Object__c"
                          >
                         </lightning-output-field>
                         </div>
                      <p class="slds-border_bottom"></p> 
                        </br>

                      <abbr title="required" class="slds-required">*</abbr>External Id
    <div class="slds-grid slds-wrap">
                      
                      <template if:true={showEditField}>
                        <lightning-input-field field-name= "External_Id__c"
                        variant="label-hidden">
                       </lightning-input-field>
                    </template>
                    </div>
                       
                    <lightning-layout horizontal-align="spread" >
                      <template if:false={showEditField}>
                        <lightning-layout-Item>
                          <lightning-output-field field-name= "External_Id__c"
                          variant="label-hidden">
                         </lightning-output-field>
                         </lightning-layout-Item>

                         <lightning-layout-Item>
                          <div class='div-block'>

                        <lightning-button-icon variant="bare"  icon-name="utility:edit" onclick={handleEdit}>
                        </lightning-button-icon>
                    </div>
                    </lightning-layout-Item>
                        </template>
                      </lightning-layout>
                      <p class="slds-line-height_reset slds-border_bottom"></p> 
                    
                  </div>
                  
                  

                 </div>
                 <p class="slds-modal__content slds-p-around_small slds-grid slds-wrap">   </p>     
                 <table class="slds-table slds-theme_shade">
                     <tr class="" >
                         <th class="" scope="col" >
                             <p class=""> <lightning-button-icon icon-name={systemInfoIconName}   class={systemInfoIconClass}   variant="bare"
                                 alternative-text={systemInfoIconLabel} onclick={toggleSection}  ></lightning-button-icon><b>System Information</b></p>  
                         </th>
                         
                     </tr>
                 </table>
                 <template if:true={showSystemInfo}>
                 <div class="slds-grid slds-gutters">
                     <div class="slds-col">
                         <span>
                 <div class="slds-modal__content slds-p-around_small slds-size_1-of-2">
                     <div>Created By</div>
                     <div class="slds-grid slds-wrap">
                         <lightning-output-field field-name="CreatedById" variant="label-hidden" aura-id="createdById"></lightning-output-field>
                         
                             <lightning-output-field field-name="CreatedDate" variant="label-hidden" aura-id="createdDate"></lightning-output-field>
                         </div>
                   
                     <br/>
                    
                 </div>
             </span>
             <p class="slds-line-height_reset slds-border_bottom"></p> 
             </div>
             <div class="slds-col">
                 <span>
                 <div class="slds-modal__content slds-p-around_small slds-size_1-of-2">
                     <div>Last Modified By</div>
                     <div class="slds-grid slds-wrap">
                         <lightning-output-field field-name="LastModifiedById" variant="label-hidden" aura-id="lastModifiedById"></lightning-output-field>
                         <div class="slds-p-left_x-small">
                             <lightning-output-field field-name="LastModifiedDate" variant="label-hidden" aura-id="lastModifiedDate"></lightning-output-field>
                         </div> 
                     </div>
                     <br/>
                     
                 
                 </div>
             </span>
             <p class="slds-line-height_reset slds-border_bottom">  </p> 
             </div>
             
         
         </div>
         </template>   
         <br/>
        </br>
                   <template if:true={getSalesforce}>
                    <footer class="slds-modal__footer">
                       <div class="slds-align_absolute-center">
                        <lightning-button class="slds-m-left_x-small slds-float_none" variant="Neutral" onclick={handleCancel} label="Cancel">Cancel</lightning-button>
                        <lightning-button type="submit" variant="brand" onclick={handleSave} name="submit" label="Save">
                        </lightning-button>                       </div>
                    </footer>
                
                </template>
            
            </lightning-record-edit-form>
        </div>
    </lightning-card>
</template>
========================================Java Script
import { LightningElement, api, track,  } from 'lwc';
import DATASTORE from "@salesforce/schema/Objects__c.Datastore__c";
import OBJECT_NAME from "@salesforce/schema/Objects__c.Name";
import DESCRIPTION from "@salesforce/schema/Objects__c.Description__c";
export default class SFconnectorobjectdetail extends LightningElement {
     
    @track getSalesforce = false;
    @track showEditField = false;
    @api recordId;
    @api objectApiName;
   @api fieldList = [DATASTORE, OBJECT_NAME, DESCRIPTION];

   @track showCreatedBy=false;
   @track isEditMode = false;
   @track hidebutton=false;
  
   @track activeTabValue = 'details';
   systemInfoIconName = 'utility:chevrondown';

   connectedCallback(){
    this.showSystemInfo=true;
    
    
   }

   handleEdit() {
    this.getSalesforce=true
    this.showEditField = !this.showEditField;
}
handleSuccess(event) {
    this.showEditField = false;
}

handleCancel(){

    this.getSalesforce=false
    this.showEditField = false;
}
handleSave(){
    this.getSalesforce=false
}

toggleSection() {
    this.showSystemInfo = !this.showSystemInfo;
    if (this.showSystemInfo) {
        this.systemInfoIconName = 'utility:chevrondown';
        this.systemInfoIconLabel = 'Show System Information';
    } else {
        this.systemInfoIconName = 'utility:chevronright';
        this.systemInfoIconLabel = 'Hide System Information';
    }
}
}
============================================Apex
public with sharing class SFcontractrule {
    @AuraEnabled(cacheable = true)
    public static List<Contractrule__c> fieldRec(String recordId) 
	       {   
        
             List<Contractrule__c>fieldObject= [SELECT Id, Name,  Rule_Order__c,Source_Object__c,Target_Object__c, Source_Record_Type__c, External_Id__c FROM  Contractrule__c WHERE Mapping_Contract__c =:recordId]; 
  
        return fieldObject;
    }
    
    @AuraEnabled(cacheable = true)
    public static Contractrule__c saveMapping(Contractrule__c mapp)
    {
     upsert mapp;
        return mapp;
    }
    @AuraEnabled(cacheable = true)
    public static List<Objects__c> SourcePicklist(String recordId) {
       // List<Contract_Rules__c> contracts =[SELECT Name, Id, Rule_Order__c, Source_Object__c, Target_Object__c, Record_Type__c FROM Contract_Rules__c WHERE Mapping_Contract__c=:recId];
       Mapping_Contract__c sourceRecord=[SELECT Target_Datastore__c, Id, Source_Datastore__c, Name FROM Mapping_Contract__c WHERE Id=:recordId];
       List<Objects__c> sourceList=[SELECT Name FROM Objects__c WHERE Datastore__c=:sourceRecord.Source_Datastore__c];
        system.debug(sourceList);
       return sourceList;
    }
  @AuraEnabled(cacheable = true)
public static List<Objects__c> TargetPicklist(String recordId) {
    try {
        Mapping_Contract__c targetRecord = [SELECT Target_Datastore__c, Id, Source_Datastore__c, Name FROM Mapping_Contract__c WHERE Id=:recordId];
        List<Objects__c> sourceList = [SELECT Name FROM Objects__c WHERE Datastore__c=:targetRecord.Target_Datastore__c];
        System.debug('Retrieved target picklist options: ' + sourceList);
        return sourceList;
    } catch (Exception ex) {
        System.debug('Error retrieving target picklist options: ' + ex.getMessage());
        return new List<Objects__c>();
    }
}

    @AuraEnabled(cacheable = true)
    public static List<String> getSourceField(String objName) {
        List<String> fieldNames = new List<String>();
        if (objName != null) {
            List<Objects__c> objectList = [SELECT Id FROM Objects__c WHERE Name = :objName LIMIT 1];
            if (!objectList.isEmpty()) {
                String objListId = objectList[0].Id;
                List<Objectfield__c> fieldList = [SELECT Id, Name FROM Objectfield__c WHERE Objects__c = :objListId];
    
                for (Objectfield__c f : fieldList) {
                    fieldNames.add(f.Name);
                }
            }
        }
    
        system.debug(fieldNames);
        return fieldNames;
    }
    

    /*@AuraEnabled
    public static void deleteAccount(Contractrule__c selectedItem){
        delete selectedItem;
    }*/
    
    @AuraEnabled
    public static void deleteAccount(Contractrule__c selectedItem) {
        try {
            delete selectedItem;
            System.debug('Account deleted successfully.'); // Add this debug statement
        } catch (Exception ex) {
            throw new AuraHandledException('An error occurred while deleting the account: ' + ex.getMessage());
        }
    }
    
//FOr Edit


    


 @AuraEnabled(cacheable=true)

 public static List<List<String>> getSrcTarval(Id recordId) {

Contractrule__c SrcTarval = [SELECT Id, Name, Source_Object__c, Source_Record_type__c,
Rule_Order__c, Target_Object__c, External_Id__c, Mapping_Contract__c

                    FROM Contractrule__c WHERE Id =: recordId LIMIT 1];
 Mapping_Contract__c moc = [SELECT Id, Source_Datastore__c, Target_Datastore__c, Name

            FROM Mapping_Contract__c WHERE Id =: SrcTarval.Mapping_Contract__c LIMIT 1];

                system.debug('RecordID---'+ recordId);
List<Objects__c> sourceobjectlist = [SELECT Id, Name FROM Objects__c WHERE Datastore__c =: moc.Source_Datastore__c];

List<Objects__c> targetdatastorelist = [SELECT Id, Name FROM Objects__c WHERE Datastore__c =: moc.Target_Datastore__c];  

           List<String> sobjltd = new List<String>();

            List<String> tobjlist = new List<String>();

           List<List<String>> jointltd = new List<List<String>>();

           for(Objects__c obj : sourceobjectlist) {
            sobjltd.add(obj.Name);

            }

           for(Objects__c obj : targetdatastorelist) {

                tobjlist.add(obj.Name);

            }

           jointltd.add(sobjltd);
           jointltd.add(tobjlist);
           system.debug('Returned: ' + jointltd);

            return jointltd;

        }

     

  




    
}

